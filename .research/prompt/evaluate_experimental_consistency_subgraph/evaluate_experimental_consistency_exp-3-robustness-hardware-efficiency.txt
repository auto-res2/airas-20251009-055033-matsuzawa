
Input:

# Instructions
You are a scientific research consistency evaluator. Your task is to evaluate a single experiment to determine:
1. Whether it is consistent with the proposed method and experimental strategy
2. Whether the results support the main claims (e.g., proposed method outperforms baseline)
3. Whether it should be included in the research paper

## Scope Constraints
- Focus ONLY on evaluating consistency between the proposed method and experimental results
- Do not suggest infrastructure changes (Docker, lock files, etc.)
- Do not recommend development/testing procedures (unit tests, synthetic graphs, etc.)
- Do not suggest implementation details or code improvements
- Do not recommend data release or reproducibility practices
- Do not require or suggest experiments on actual hardware (e.g., real edge devices, physical deployment)
- Evaluate only: method-result alignment, experimental design adequacy, result interpretation validity, and statistical rigor within computational/simulation contexts

Based on your analysis, provide:
1. `consistency_feedback` (str): Detailed feedback explaining the consistency evaluation and suggestions for improvement
2. `consistency_score` (int): A score from 1-10 indicating the quality and consistency of the experimental design and results

## Evaluation Criteria

### consistency_feedback (str)
Provide specific feedback focused on **scientific consistency evaluation** and **clearly categorize the source of any issues**:

**Problem Categorization - Identify which area(s) need improvement:**

1. **Experimental Strategy Issues**:
   - Evaluate if the experimental strategy is fundamentally sound for validating the proposed method
   - Assess whether the experimental setup provides adequate scope and rigor
   - Identify if the chosen metrics, baselines, or evaluation approach are appropriate

2. **Implementation Issues**:
   - Assess whether the generated code correctly implements the described experimental strategy
   - Identify gaps between what the strategy specifies and what the code actually does
   - Point out if the implementation fails to follow the experimental design

3. **Result Interpretation Issues**:
   - Assess alignment between claimed method and actual experimental results
   - Identify gaps between theoretical claims and empirical evidence
   - Point out contradictions between expected and observed outcomes
   - **Critical**: Check if the proposed method demonstrates improvement over baseline

**For each identified issue, clearly specify:**
- Which category the problem falls into
- What specific aspect needs improvement
- How it affects the paper inclusion decision

### consistency_score (int)
Provide a numerical score (1-10) based on execution status and result quality:

- **1-3: Critical Failure / Not Executed**
  - The experiment failed to run (e.g., code crash, setup error)
  - Produced no meaningful output
  - Implementation was fundamentally flawed, invalidating the results
  - The primary claims cannot be evaluated

- **4-5: Executed, but Poor or Negative Results**
  - The experiment ran correctly, but the results are negative
  - The proposed method performs worse than or shows no meaningful improvement over the baseline
  - The results contradict or fail to support the primary claims

- **6-7: Executed, Positive but Not Conclusive Results**
  - The experiment ran correctly and shows clear positive improvement over the baseline
  - Results align with the primary claims
  - Evidence is weakened by minor issues in scientific rigor (e.g., single-seed runs, lack of statistical tests, limited scope)
  - The results are suggestive but not definitive

- **8-10: Executed, Conclusive and High-Impact Results**
  - The experiment ran correctly and provides strong, reliable evidence supporting the primary claims
  - Results are clearly superior to the baseline
  - Experimental design demonstrates high scientific rigor (e.g., multiple runs, fair comparisons, statistical validation)
  - Score of 9-10 indicates particularly impactful and insightful magnitude of improvement

## Context

**Proposed Method:** {
    "Open Problems": "1. Existing forward-only TTA (NGFAT) still updates only BN γ,β and therefore cannot adapt models that use Group/Layer/Instance Norm or no normalisation at all (e.g. transformers, self-normalising nets).\n2. Forward-only natural-gradient steps are always executed although many test batches are easy – unnecessary parameter noise slows convergence and may accumulate drift in recurring scenarios.\n3. There is no mechanism to detect harmful updates on-device; collapsing on rare, high-entropy inputs remains possible and cannot be rolled back without labelled data.\n4. Current Fisher blocks ignore cross-sample curvature; mini-batches <8 (typical on MCU) give noisy statistics.",
    "Methods": "Method name: ZORRO – Zero-backward Online Risk-aware RObust adaptation.\nKey novelties:\na) Universal forward-Fisher: derive closed-form 2×2 (or 1×1) natural-gradient for *any* affine layer that is a linear map followed by element-wise normalisation f(x)=α(x−μ)/σ+β. This covers BN, GN, LN, IN and the RMS norm of ViT. Statistics (μ,σ) are read from the same forward pass; memory overhead 2×feature-dim.\n\nb) Cross-batch shrinkage: maintain a running Fisher F̂_t and apply James–Stein shrinkage with factor τ_t= n/(n+λ) where n is effective sample count; this drastically reduces noise for tiny batches (n≤4) without extra FLOPs.\n\nc) Accuracy-estimation gate: integrate AETTA-mini (dropout-free variant using Monte-Carlo weight masking) to obtain a label-free error estimate ĥ_t after each batch. Update is *committed* only if ĥ_t − ĥ_{t−1}>ϵ or entropy drop >δ; otherwise parameters are left unchanged (pure inference). This halves update frequency on slow streams and prevents drift.\n\nd) Rollback buffer: store last K=3 accepted parameter states + their ĥ. If two consecutive batches yield worse ĥ than all K checkpoints, revert to best state (cost O(K·P) copy, P tiny because we save only γ,β,α). Fully unsupervised.\n\ne) µC-friendly maths: all matrix inverses are 2×2; no sqrt/exp outside LUT; fits in CMSIS-NN.\n",
    "Experimental Setup": "Datasets & streams:\n• TinyImageNet-C (severity 3-5) with η_r∈{1,1/2,1/8}.\n• CIFAR-10-C and CIFAR-10.1 natural shift.\n• Google Speech Commands v2 with background noise (audio, shows non-vision generality).\n• Real on-device capture: 5-fps webcam stream on STM32H7 (640 KB SRAM).\n\nModels: ResNet-20-GN, MobileNet-V2-GN, ViT-Tiny with RMS Norm, and a 1-D CNN for speech.\n\nBaselines: Source, TENT, FATENT, NGFAT, RoTTA, AETTA-reset, BN adaptive.\n\nMetrics:\n1. Error after {1,2,4} batches.\n2. Area-under-error-curve under Realistic Online Protocol (ROP, η_r).\n3. Avg. wall-clock latency & energy (Arm-Cortex-M vs Jetson-Nano).\n4. False-update rate (updates skipped although target batch lowered error <0.1 %).\n5. Collapse-recovery success (% runs where rollback prevents >5 % error spike).\n",
    "Experimental Code": "# zorro.py  (core update-gate, 60 LOC)\n@torch.no_grad()\ndef zorro_step(model, batch, state):\n    out = model(batch)\n    H = entropy(out)\n    ## 1. Unsup. accuracy proxy via softmax disagreement\n    q = out.softmax(1)\n    p = (q * (1-q)).sum(1)             # variance proxy\n    acc_hat = 1 - p.mean()\n    ## 2. Decide whether to adapt\n    if (acc_hat < state.last_acc-1e-3) or (H.mean()>state.last_H*0.9):\n        for mod in state.affine:       # BN, GN, LN, RMSNorm\n            y = mod.output             # cached activation\n            g = state.dH_dz @ y.mean(0)  # ∂H/∂α like NGFAT\n            F = y.var(0)+1e-5\n            tau = state.n/(state.n+state.lambda_)\n            step = -tau * g / F\n            mod.weight += step\n        state.save_checkpoint(acc_hat)\n    state.update_stats(acc_hat, H)\n    return out",
    "Expected Result": "• Matches NGFAT accuracy on CIFAR-C but with 35 % fewer parameter updates.\n• On GN/LN models where BN-only methods fail, ZORRO reduces error from 38 % (source) to 24 % within 2 batches, beating TENT-GN (27 %).\n• MCU demo: 5 fps stream maintained at 3.7 mJ/frame vs 6.2 mJ for TENT.\n• Rollback prevents >90 % of catastrophic error spikes observed in NGFAT under recurring shift.\n• Audio CNN: word error 8.1 %→6.4 % after first noisy batch, showing modality-agnosticism.",
    "Expected Conclusion": "ZORRO generalises forward-only natural-gradient TTA to any normalisation layer, autonomously decides *when* to adapt via built-in label-free risk estimates, and adds a lightweight rollback against collapse. It retains single-pass speed, extends applicability to transformers and micro-controllers, and raises the bar for robust, energy-aware test-time learning in real-world streams."
}

**Overall Experimental Strategy:** Overall experimental strategy for demonstrating the effectiveness of ZORRO

1. Core validation axes
   a. Adaptation benefit – Does ZORRO lower on-line error faster and further than all competitors?
   b. Efficiency – Does it achieve that benefit with fewer parameter updates, lower latency, and lower energy?
   c. Robustness – Does it remain stable under severe or recurring shifts and avoid catastrophic drift?
   d. Generality – Does it work across normalisation types, model families, modalities, batch sizes, and hardware classes?
   e. Safety – Can the gate + rollback reject harmful updates better than prior art?

2. Comparative framework
   • Methods: (i) frozen source model, (ii) classic BN adaptation, (iii) forward-only SOTA (TENT, NGFAT, FATENT), (iv) risk-aware SOTA (RoTTA, AETTA-reset), (v) ZORRO ablations (−Fisher, −shrinkage, −gate, −rollback, −all) and full ZORRO.
   • Datasets/shifts: vision, audio, synthetic recurrences, real device streams. Each experiment will use an identical set of comparison methods so curves are directly overlayable.
   • Hardware profiles: A100 (heavy), Jetson-Nano (edge GPU), STM32H7 (MCU) – same software harness, differing batch-size budgets.

3. Multi-angle evidence collection
   • Quantitative accuracy: instantaneous error at fixed adaptation horizons {1,2,4,∞} batches; area-under-error-curve (AUEC) over the whole stream; Wilcoxon signed-rank test over 5 seeds.
   • Adaptation cost: (i) number of parameter update steps, (ii) wall-clock latency per frame, (iii) mean energy per frame (on-board power logger for Jetson / MCU).
   • Stability metrics: variance of error, maximum error spike, collapse rate, rollback recovery rate, false-update rate.
   • Qualitative analysis: histogram of gate decisions, t-SNE of feature drift, visual audio/vision examples where ZORRO reverted.
   • Computational analysis: FLOPs, memory, additional parameters; measured with Torch-Profiler and MCU on-device counters.

4. Experimental phases (common skeleton for every task)
   Phase-0: Baseline replication to calibrate code, fix seeds, and verify that results reproduce published numbers on clean data.
   Phase-1: Standard corruptions – run single-pass streams under ROP; log all core metrics.
   Phase-2: Recurring/easy-hard cycles – stress test the gate/rollback; identical shift schedule for all methods.
   Phase-3: Tiny-batch regime – constrain batch ≤4 to expose Fisher shrinkage; repeat Phase-1 metrics.
   Phase-4: Hardware deployment – run frozen inference & on-line adaptation in real-time on Jetson/MCU; capture energy & fps.
   Phase-5: Ablation sweep – repeat Phases 1–3 with each component disabled to pinpoint contribution.
   Phase-6: Cross-modality – apply to Speech Commands; same phases 1–3.

5. Success criteria (must hold in ≥4/5 seeds)
   • AUEC improvement ≥10% over best non-ZORRO competitor on every dataset-model pair.
   • Parameter-update count ≤70% of NGFAT average while maintaining equal or better final error.
   • Catastrophic collapse rate <1%; rollback recovers ≥80% of induced collapses.
   • Latency overhead ≤5% vs source inference on A100; energy per frame ≤65% of TENT on MCU.
   • No ablation variant may outperform full ZORRO on more than 10% of runs.

6. Statistical protocol
   • 5 random seeds × 5 shuffled test streams per condition.
   • Report median and 95% CI; conduct paired Wilcoxon tests with Holm-Bonferroni correction.
   • Release code, logs, and weights for full transparency.

7. Resource allocation
   • Distributed runner uses 6 A100 GPUs for parallel seeds, leaving 2 GPUs for hyper-parameter sweeps.
   • RAM headroom (2 TB) holds all datasets and checkpoints in a RAM-disk, eliminating I/O variance.
   • Edge hardware tests run nightly; results auto-synced to central dashboard.

This unified strategy ensures every experiment, regardless of dataset or model, produces directly comparable evidence on adaptation benefit, cost, robustness, generality, and safety, thereby establishing a comprehensive case for ZORRO’s effectiveness.

## Current Experiment to Evaluate

**Experiment ID:** exp-3-robustness-hardware-efficiency

**Experiment Description:** Objective / hypothesis: Demonstrate that ZORRO maintains robustness under recurring shifts and tiny micro-controller batches while offering superior energy & latency efficiency on resource-constrained hardware.

Models
• ResNet-20-GN (for STM32 MCU deployment)
• 1-D CNN-Speech (5-layer, GN)

Datasets / streams
• TinyImageNet-C with easy↔hard cycles (as in exp-2) streamed at 5 FPS.
• Google Speech Commands v2 with additive café/traffic noise (SNR 0–20 dB) streamed at real-time 16 kHz windows.
• Live STM32H7 webcam stream (640×480 @5 FPS, indoor office lighting) captured via serial link.

Dataset preprocessing
Vision: bilinear down-scale to 64×64 for MCU RAM budget, uint8→float32 normalise on device.
Audio: 40-channel log-melspectrogram, 1×128 frame window, no overlap.

Data splitting
• Train/val as official.
• Online test: continuous real-time capture; first 1 min discarded for warm-up.

Repetitions
• 3 physical devices × 3 seeds per stream.

Evaluation metrics
Primary  (edge): energy/frame (mJ) via INA260 sensor, average latency/frame, sustained FPS.
Secondary: AUEC, collapse rate, rollback recovery success.

Comparisons / adjustments
• NGFAT & RoTTA re-implemented in CMSIS-NN fixed-point; learning-rate retuned (η=5e-4) for stable MCU convergence.
• ZORRO-lite = Fisher+shrinkage but without rollback (for memory ablation to fit 448 KB).

Hyper-parameter analysis
• Measure sensitivity to gate entropy threshold δ ∈ {0.05,0.1,0.2} at MCU batch-size 1.

Robustness tests
• Noise-injection: live brightness oscillation (vision) and pink-noise burst (audio).
• OOD domain transfer: suddenly switch webcam lighting to infrared illumination; evaluate gate reaction and rollback.

Compute profiling
• FLOPs/inference: measured by CubeMX cycle counter; memory footprint via map file.
• Wall-clock cost on Jetson-Nano (GPU) vs STM32 (CPU) recorded.

Selection / averaging
• Report median over devices; 95% CI with bootstrap (1 k resamples).

Example MCU code (fragment, C++)
```c
for(;;){
  capture_frame(buf);
  preprocess(buf, scratch);
  zorro_step_int8(model, scratch, &state);
  transmit_logits(model.out);
}
```
Expected outcome: On STM32, ZORRO-full keeps error <25% with 3.7 mJ/frame (-40% vs TENT) and zero collapses; ZORRO-lite fits RAM but shows higher collapse rate; NGFAT fails to converge on batch-1 streams. On Jetson-Nano, ZORRO saves ≥30% updates and 20% energy vs NGFAT while matching accuracy.

**Run Variations:** ['source-frozen', 'NGFAT', 'RoTTA', 'ZORRO-lite', 'ZORRO-full']

**Generated Code:** {"evaluate_py": "", "full_experiment_yaml": "", "main_py": "", "model_py": "", "preprocess_py": "", "pyproject_toml": "", "smoke_test_yaml": "", "train_py": ""}

**Experimental Results:**

- Result: === [PHASE 2/2] Full experiment end Thu Oct  9 08:47:53 AM UTC 2025 ===

- Error: 
- Images: ['accuracy.pdf', 'final_accuracy_bar.pdf', 'training_loss.pdf']


**Primary Goal**: Evaluate whether this specific experiment is consistent, supports the main claims, and should be included in the research paper.
Output:
{
    "consistency_feedback": "The experiment is well-described on paper (tiny-batch MCU, energy/latency, robustness tests, baseline comparisons), so the experimental strategy itself is sound and aligns with the overall evaluation plan for ZORRO (addresses robustness, efficiency, generality). However, the artefacts delivered for this run are essentially empty:\n\n1. Implementation Issues\n   • No code files are populated (all entries in the code bundle are empty strings). Therefore the MCU/Jetson versions of ZORRO, NGFAT, RoTTA, etc., were not actually executed.\n   • The log shows only a generic “Full experiment end” line; there are no scalar outputs, no energy or latency measurements, and no numerical error rates.\n   • The referenced figures (accuracy.pdf, final_accuracy_bar.pdf, training_loss.pdf) are listed but their contents are not provided, so results cannot be inspected or reproduced.\n\n2. Result Interpretation Issues\n   • Because numerical results are missing, none of the stated hypotheses (≤25 % error, 3.7 mJ / frame, zero collapses, NGFAT failure, etc.) can be verified.\n   • Consequently, the experiment provides no empirical support for the claims of robustness, energy savings, or superiority over baselines.\n\n3. Experimental Strategy Issues (minor)\n   • While the selected metrics and comparison methods are appropriate, the absence of statistical analysis (Wilcoxon tests, CIs) becomes critical once the raw data are missing.\n\nImpact on paper inclusion: In its current state the experiment does not demonstrate anything; including it would weaken the paper because reviewers will request the missing evidence. The experiment should be rerun with functional code and complete result logs before inclusion.\n",
    "consistency_score": 2
}
