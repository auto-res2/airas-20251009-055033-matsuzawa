
Input:
You are an AI code reviewer validating production-ready experiment code for research papers.

Your task is to compare the derived experiment_code with the original base_code to ensure that:
1. No important functionality has been omitted or truncated
2. All placeholders have been completely replaced with working implementations (no TODO, PLACEHOLDER, pass, or ... allowed)
3. The code is immediately executable and ready for research paper experiments
4. The derived code maintains the quality and completeness of the base foundation

# Instructions

## Core Validation Criteria
Check if the derived experiment code meets ALL of the following requirements:

1. **Complete Implementation Preservation**:
   - All functionality from base_code is preserved or properly enhanced
   - No code sections have been omitted or significantly shortened
   - Core algorithms and logic remain intact and functional
   - No reduction in code quality or completeness

2. **Complete Placeholder Replacement and Variation Implementation**:
   - All `DATASET_PLACEHOLDER` entries replaced with complete, working Hugging Face dataset loading
   - All `MODEL_PLACEHOLDER` entries replaced with complete, working model architectures
   - All `SPECIFIC_CONFIG_PLACEHOLDER` entries replaced with actual parameters
   - All run_variations are defined in both `config/smoke_test.yaml` and `config/full_experiment.yaml`
   - All run_variations are implemented in `src/model.py`
   - `config/smoke_test.yaml` contains ALL run variations in lightweight form
   - No TODO, PLACEHOLDER, pass, ..., or any incomplete implementations remain

3. **Functional Enhancement**:
   - Dataset-specific preprocessing is properly implemented
   - Model-specific configurations are correctly applied
   - Evaluation metrics are adapted for the specific experimental setup
   - All external resources are properly integrated

4. **Code Completeness**:
   - No truncated functions or incomplete implementations
   - All imports and dependencies are properly specified
   - Configuration files contain real experimental parameters
   - No "[UNCHANGED]" markers or similar placeholders remain

5. **Consistency with Base Code**:
   - Same file structure and organization
   - Consistent coding style and patterns
   - Proper error handling and logging maintained
   - All base functionality enhanced, not removed

## Detection of Common Issues
Flag the following problems if found:

- **Truncation**: Code sections that are significantly shorter than base_code equivalents
- **Omission**: Missing functions, classes, or important code blocks from base_code
- **Incomplete Replacement**: TODO, PLACEHOLDER, pass, ..., or any placeholder patterns that haven't been fully replaced with working code
- **Quality Degradation**: Simplified logic that reduces functionality
- **Structural Changes**: Unexpected modifications to the core architecture
- **Not Executable**: Code that cannot be run immediately due to missing implementations

## Output Format
Respond with a JSON object containing:
- `is_experiment_code_ready`: boolean - true if ALL criteria are met, false otherwise
- `experiment_code_issue`: string - specific issues found if any criteria are not met

# Current Research Method
{
    "Open Problems": "1. Existing forward-only TTA (NGFAT) still updates only BN γ,β and therefore cannot adapt models that use Group/Layer/Instance Norm or no normalisation at all (e.g. transformers, self-normalising nets).\n2. Forward-only natural-gradient steps are always executed although many test batches are easy – unnecessary parameter noise slows convergence and may accumulate drift in recurring scenarios.\n3. There is no mechanism to detect harmful updates on-device; collapsing on rare, high-entropy inputs remains possible and cannot be rolled back without labelled data.\n4. Current Fisher blocks ignore cross-sample curvature; mini-batches <8 (typical on MCU) give noisy statistics.",
    "Methods": "Method name: ZORRO – Zero-backward Online Risk-aware RObust adaptation.\nKey novelties:\na) Universal forward-Fisher: derive closed-form 2×2 (or 1×1) natural-gradient for *any* affine layer that is a linear map followed by element-wise normalisation f(x)=α(x−μ)/σ+β. This covers BN, GN, LN, IN and the RMS norm of ViT. Statistics (μ,σ) are read from the same forward pass; memory overhead 2×feature-dim.\n\nb) Cross-batch shrinkage: maintain a running Fisher F̂_t and apply James–Stein shrinkage with factor τ_t= n/(n+λ) where n is effective sample count; this drastically reduces noise for tiny batches (n≤4) without extra FLOPs.\n\nc) Accuracy-estimation gate: integrate AETTA-mini (dropout-free variant using Monte-Carlo weight masking) to obtain a label-free error estimate ĥ_t after each batch. Update is *committed* only if ĥ_t − ĥ_{t−1}>ϵ or entropy drop >δ; otherwise parameters are left unchanged (pure inference). This halves update frequency on slow streams and prevents drift.\n\nd) Rollback buffer: store last K=3 accepted parameter states + their ĥ. If two consecutive batches yield worse ĥ than all K checkpoints, revert to best state (cost O(K·P) copy, P tiny because we save only γ,β,α). Fully unsupervised.\n\ne) µC-friendly maths: all matrix inverses are 2×2; no sqrt/exp outside LUT; fits in CMSIS-NN.\n",
    "Experimental Setup": "Datasets & streams:\n• TinyImageNet-C (severity 3-5) with η_r∈{1,1/2,1/8}.\n• CIFAR-10-C and CIFAR-10.1 natural shift.\n• Google Speech Commands v2 with background noise (audio, shows non-vision generality).\n• Real on-device capture: 5-fps webcam stream on STM32H7 (640 KB SRAM).\n\nModels: ResNet-20-GN, MobileNet-V2-GN, ViT-Tiny with RMS Norm, and a 1-D CNN for speech.\n\nBaselines: Source, TENT, FATENT, NGFAT, RoTTA, AETTA-reset, BN adaptive.\n\nMetrics:\n1. Error after {1,2,4} batches.\n2. Area-under-error-curve under Realistic Online Protocol (ROP, η_r).\n3. Avg. wall-clock latency & energy (Arm-Cortex-M vs Jetson-Nano).\n4. False-update rate (updates skipped although target batch lowered error <0.1 %).\n5. Collapse-recovery success (% runs where rollback prevents >5 % error spike).\n",
    "Experimental Code": "# zorro.py  (core update-gate, 60 LOC)\n@torch.no_grad()\ndef zorro_step(model, batch, state):\n    out = model(batch)\n    H = entropy(out)\n    ## 1. Unsup. accuracy proxy via softmax disagreement\n    q = out.softmax(1)\n    p = (q * (1-q)).sum(1)             # variance proxy\n    acc_hat = 1 - p.mean()\n    ## 2. Decide whether to adapt\n    if (acc_hat < state.last_acc-1e-3) or (H.mean()>state.last_H*0.9):\n        for mod in state.affine:       # BN, GN, LN, RMSNorm\n            y = mod.output             # cached activation\n            g = state.dH_dz @ y.mean(0)  # ∂H/∂α like NGFAT\n            F = y.var(0)+1e-5\n            tau = state.n/(state.n+state.lambda_)\n            step = -tau * g / F\n            mod.weight += step\n        state.save_checkpoint(acc_hat)\n    state.update_stats(acc_hat, H)\n    return out",
    "Expected Result": "• Matches NGFAT accuracy on CIFAR-C but with 35 % fewer parameter updates.\n• On GN/LN models where BN-only methods fail, ZORRO reduces error from 38 % (source) to 24 % within 2 batches, beating TENT-GN (27 %).\n• MCU demo: 5 fps stream maintained at 3.7 mJ/frame vs 6.2 mJ for TENT.\n• Rollback prevents >90 % of catastrophic error spikes observed in NGFAT under recurring shift.\n• Audio CNN: word error 8.1 %→6.4 % after first noisy batch, showing modality-agnosticism.",
    "Expected Conclusion": "ZORRO generalises forward-only natural-gradient TTA to any normalisation layer, autonomously decides *when* to adapt via built-in label-free risk estimates, and adds a lightweight rollback against collapse. It retains single-pass speed, extends applicability to transformers and micro-controllers, and raises the bar for robust, energy-aware test-time learning in real-world streams."
}

# Experimental Design
## Experiment Strategy
Overall experimental strategy for demonstrating the effectiveness of ZORRO

1. Core validation axes
   a. Adaptation benefit – Does ZORRO lower on-line error faster and further than all competitors?
   b. Efficiency – Does it achieve that benefit with fewer parameter updates, lower latency, and lower energy?
   c. Robustness – Does it remain stable under severe or recurring shifts and avoid catastrophic drift?
   d. Generality – Does it work across normalisation types, model families, modalities, batch sizes, and hardware classes?
   e. Safety – Can the gate + rollback reject harmful updates better than prior art?

2. Comparative framework
   • Methods: (i) frozen source model, (ii) classic BN adaptation, (iii) forward-only SOTA (TENT, NGFAT, FATENT), (iv) risk-aware SOTA (RoTTA, AETTA-reset), (v) ZORRO ablations (−Fisher, −shrinkage, −gate, −rollback, −all) and full ZORRO.
   • Datasets/shifts: vision, audio, synthetic recurrences, real device streams. Each experiment will use an identical set of comparison methods so curves are directly overlayable.
   • Hardware profiles: A100 (heavy), Jetson-Nano (edge GPU), STM32H7 (MCU) – same software harness, differing batch-size budgets.

3. Multi-angle evidence collection
   • Quantitative accuracy: instantaneous error at fixed adaptation horizons {1,2,4,∞} batches; area-under-error-curve (AUEC) over the whole stream; Wilcoxon signed-rank test over 5 seeds.
   • Adaptation cost: (i) number of parameter update steps, (ii) wall-clock latency per frame, (iii) mean energy per frame (on-board power logger for Jetson / MCU).
   • Stability metrics: variance of error, maximum error spike, collapse rate, rollback recovery rate, false-update rate.
   • Qualitative analysis: histogram of gate decisions, t-SNE of feature drift, visual audio/vision examples where ZORRO reverted.
   • Computational analysis: FLOPs, memory, additional parameters; measured with Torch-Profiler and MCU on-device counters.

4. Experimental phases (common skeleton for every task)
   Phase-0: Baseline replication to calibrate code, fix seeds, and verify that results reproduce published numbers on clean data.
   Phase-1: Standard corruptions – run single-pass streams under ROP; log all core metrics.
   Phase-2: Recurring/easy-hard cycles – stress test the gate/rollback; identical shift schedule for all methods.
   Phase-3: Tiny-batch regime – constrain batch ≤4 to expose Fisher shrinkage; repeat Phase-1 metrics.
   Phase-4: Hardware deployment – run frozen inference & on-line adaptation in real-time on Jetson/MCU; capture energy & fps.
   Phase-5: Ablation sweep – repeat Phases 1–3 with each component disabled to pinpoint contribution.
   Phase-6: Cross-modality – apply to Speech Commands; same phases 1–3.

5. Success criteria (must hold in ≥4/5 seeds)
   • AUEC improvement ≥10% over best non-ZORRO competitor on every dataset-model pair.
   • Parameter-update count ≤70% of NGFAT average while maintaining equal or better final error.
   • Catastrophic collapse rate <1%; rollback recovers ≥80% of induced collapses.
   • Latency overhead ≤5% vs source inference on A100; energy per frame ≤65% of TENT on MCU.
   • No ablation variant may outperform full ZORRO on more than 10% of runs.

6. Statistical protocol
   • 5 random seeds × 5 shuffled test streams per condition.
   • Report median and 95% CI; conduct paired Wilcoxon tests with Holm-Bonferroni correction.
   • Release code, logs, and weights for full transparency.

7. Resource allocation
   • Distributed runner uses 6 A100 GPUs for parallel seeds, leaving 2 GPUs for hyper-parameter sweeps.
   • RAM headroom (2 TB) holds all datasets and checkpoints in a RAM-disk, eliminating I/O variance.
   • Edge hardware tests run nightly; results auto-synced to central dashboard.

This unified strategy ensures every experiment, regardless of dataset or model, produces directly comparable evidence on adaptation benefit, cost, robustness, generality, and safety, thereby establishing a comprehensive case for ZORRO’s effectiveness.

# Base Code (Reference Foundation)
{"evaluate_py": "#!/usr/bin/env python\n\"\"\"Aggregate results across run variations, compute comparison metrics \u0026\npublication-ready figures.  This script is triggered *once* by src.main after\nall individual experiment runs are finished.\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\nmatplotlib.use(\"Agg\")\n\nFIG_TOPICS = [\n    (\"training_loss\", \"Cross-entropy loss\"),\n    (\"accuracy\", \"Accuracy (%)\"),\n    (\"final_accuracy_bar\", \"Final validation accuracy\")\n]\n\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--results-dir\", type=str, required=True,\n                   help=\"Root directory containing sub-dirs for each run\")\n    return p.parse_args()\n\n\ndef collect_results(results_dir: Path) -\u003e pd.DataFrame:\n    records: List[Dict] = []\n    for sub in results_dir.iterdir():\n        if not sub.is_dir():\n            continue\n        res_file = sub / \"results.json\"\n        if res_file.exists():\n            rec = json.loads(res_file.read_text())\n            records.append(rec)\n    if not records:\n        raise RuntimeError(f\"No results.json files found in {results_dir}\")\n    return pd.DataFrame.from_records(records)\n\n\ndef plot_comparisons(df: pd.DataFrame, results_dir: Path):\n    images = results_dir / \"images\"\n    images.mkdir(exist_ok=True, parents=True)\n\n    # 1) Line curves \u2013 loss \u0026 acc\n    for metric_key, ylabel in [(\"loss\", \"Cross-entropy loss\"),\n                               (\"acc\", \"Accuracy (%)\")]:\n        plt.figure()\n        for _, row in df.iterrows():\n            y = [h[metric_key] for h in row[\"train_history\"]]\n            x = [h[\"epoch\"] for h in row[\"train_history\"]]\n            plt.plot(x, y, marker=\"o\", label=row[\"run_id\"])\n            plt.annotate(f\"{y[-1]:.2f}\" if metric_key == \"acc\" else f\"{y[-1]:.3f}\",\n                         (x[-1], y[-1]), textcoords=\"offset points\",\n                         xytext=(0, 5), ha=\u0027center\u0027)\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(ylabel)\n        plt.legend()\n        plt.title(ylabel + \" comparison\")\n        plt.tight_layout()\n        fname = \"training_loss.pdf\" if metric_key == \"loss\" else \"accuracy.pdf\"\n        plt.savefig(images / fname, bbox_inches=\"tight\")\n        plt.close()\n\n    # 2) Bar \u2013 final validation accuracy\n    plt.figure()\n    sns.barplot(x=\"run_id\", y=\"val_acc\", data=df)\n    for idx, row in df.iterrows():\n        plt.text(idx, row[\"val_acc\"] + 0.2, f\"{row[\u0027val_acc\u0027]:.2f}%\", ha=\u0027center\u0027)\n    plt.ylabel(\"Validation accuracy (%)\")\n    plt.xlabel(\"Run\")\n    plt.title(\"Final validation accuracy across runs\")\n    plt.tight_layout()\n    plt.savefig(images / \"final_accuracy_bar.pdf\", bbox_inches=\"tight\")\n    plt.close()\n\n\ndef main():\n    args = parse_args()\n    results_dir = Path(args.results_dir).expanduser()\n\n    df = collect_results(results_dir)\n    plot_comparisons(df, results_dir)\n\n    # Output comparison results in JSON (stdout)\n    comp = df[[\"run_id\", \"val_acc\", \"val_loss\" if \"val_loss\" in df.columns else None]].to_dict(\n        orient=\"records\")\n    print(json.dumps({\"comparison\": comp}))\n\n\nif __name__ == \"__main__\":\n    main()", "full_experiment_yaml": "# Template for the *full* experiment suite. Only placeholders are provided here.\n# The derive_specific step will populate this with concrete datasets, models and\n# hyper-parameters.\n\nexperiments:\n  # --------------------------------------------------------------------- #\n  # PLACEHOLDER: Add comprehensive run variations (baseline, proposed,     #\n  #              ablations, hardware-specific) here.                      #\n  #                                                                       #\n  # Example structure:                                                     #\n  # - run_id: tinyimagenet_resnet20_gn_source                              #\n  #   dataset:                                                             #\n  #     name: TINYIMAGENET_CORRUPT_C_PLACEHOLDER                           #\n  #   model:                                                               #\n  #     name: RESNET20_GN_PLACEHOLDER                                      #\n  #     pretrained: /path/to/source_ckpt.pt                                #\n  #   training:                                                            #\n  #     method: source                                                     #\n  #     batch_size: 32                                                     #\n  #     epochs: 0                                                          #\n  # --------------------------------------------------------------------- #\n  - run_id: FULL_EXPERIMENT_PLACEHOLDER\n    dataset: {DATASET_PLACEHOLDER}\n    model: {MODEL_PLACEHOLDER}\n    training: {SPECIFIC_CONFIG_PLACEHOLDER}\n", "main_py": "#!/usr/bin/env python\n\"\"\"Main orchestrator script.\n\nUsage examples:\n\n(1) Smoke test \u2013 lightweight synthetic run to verify that *all* variations\n    execute without GPU OOM etc.\n\n    uv run python -m src.main --smoke-test --results-dir /tmp/zorro_results\n\n(2) Full experiment \u2013 reads all variations from config/full_experiment.yaml\n\n    uv run python -m src.main --full-experiment --results-dir /path/to/res\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport shutil\nimport subprocess\nimport sys\nimport threading\nfrom pathlib import Path\nfrom typing import List\n\nimport yaml\n\nCONFIG_DIR = Path(__file__).resolve().parent.parent / \"config\"\n\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    g = p.add_mutually_exclusive_group(required=True)\n    g.add_argument(\"--smoke-test\", action=\"store_true\")\n    g.add_argument(\"--full-experiment\", action=\"store_true\")\n    p.add_argument(\"--results-dir\", type=str, required=True,\n                   help=\"Directory to store *all* outputs (logs, figs, metrics)\")\n    return p.parse_args()\n\n\n# ------------------------------------------------------------------- helpers #\n\ndef _tee(stream, tee_to_file):\n    \"\"\"Read `stream` byte-by-byte, write both to sys.\u003cout/err\u003e and file.\"\"\"\n    for line in iter(stream.readline, b\"\"):\n        decoded = line.decode()\n        tee_to_file.write(decoded)\n        tee_to_file.flush()\n        sys.stdout.write(decoded) if tee_to_file.name.endswith(\"stdout.log\") else sys.stderr.write(decoded)\n    stream.close()\n\n\ndef _launch_train(run_cfg: dict, results_root: Path, python_bin: str = sys.executable):\n    run_id = run_cfg[\"run_id\"]\n    run_dir = results_root / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Write single-run YAML for the sub-process to consume\n    run_cfg_path = run_dir / \"config.yaml\"\n    run_cfg_path.write_text(yaml.safe_dump(run_cfg))\n\n    # Prepare log files\n    stdout_path = run_dir / \"stdout.log\"\n    stderr_path = run_dir / \"stderr.log\"\n    stdout_f = stdout_path.open(\"w\")\n    stderr_f = stderr_path.open(\"w\")\n\n    cmd = [python_bin, \"-m\", \"src.train\", \"--config-path\", str(run_cfg_path),\n           \"--results-dir\", str(run_dir)]\n\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    # Real-time tee of stdout / stderr\n    threads: List[threading.Thread] = []\n    threads.append(threading.Thread(target=_tee, args=(proc.stdout, stdout_f)))\n    threads.append(threading.Thread(target=_tee, args=(proc.stderr, stderr_f)))\n    for t in threads:\n        t.daemon = True\n        t.start()\n\n    proc.wait()\n    for t in threads:\n        t.join()\n    stdout_f.close()\n    stderr_f.close()\n\n    if proc.returncode != 0:\n        raise RuntimeError(f\"Run {run_id} failed with exit code {proc.returncode}\")\n\n\n# -------------------------------------------------------------------- main #\n\ndef main():\n    args = parse_args()\n    results_root = Path(args.results_dir).expanduser()\n    if results_root.exists():\n        shutil.rmtree(results_root)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    cfg_path = CONFIG_DIR / (\"smoke_test.yaml\" if args.smoke_test else \"full_experiment.yaml\")\n    config = yaml.safe_load(cfg_path.read_text())\n    experiments = config[\"experiments\"]\n\n    for run_cfg in experiments:\n        _launch_train(run_cfg, results_root)\n\n    # After all runs -\u003e aggregate\n    subprocess.run([sys.executable, \"-m\", \"src.evaluate\", \"--results-dir\", str(results_root)], check=True)\n\n\nif __name__ == \"__main__\":\n    main()", "model_py": "\"\"\"Model architectures \u0026 factory.\nOnly *core* logic is provided here. Dataset / modality specific models (e.g.\nResNet-20-GN, MobileNet-V2-GN, ViT-Tiny) will be injected later via the\nplaceholder mechanism.\"\"\"\nfrom __future__ import annotations\n\nfrom typing import Dict\n\nimport torch\nimport torch.nn as nn\n\n__all__ = [\"build_model\"]\n\n\n# ------------------------------------------------------------------ helpers #\n\ndef _make_norm(norm_type: str, num_features: int):\n    if norm_type == \"batch\":\n        return nn.BatchNorm2d(num_features, affine=True)\n    if norm_type == \"group\":\n        return nn.GroupNorm(num_groups=4, num_channels=num_features, affine=True)\n    if norm_type == \"layer\":\n        return nn.GroupNorm(num_groups=1, num_channels=num_features, affine=True)\n    raise ValueError(f\"Unsupported norm type: {norm_type}\")\n\n\n# --------------------------------------------------------------  SIMPLE CNN #\nclass SimpleCNN(nn.Module):\n    \"\"\"Light-weight CNN with GroupNorm. Suitable for smoke tests and synthetic\n    datasets. Real research models will be plugged-in later.\"\"\"\n\n    def __init__(self, in_channels: int = 3, num_classes: int = 10,\n                 norm: str = \"group\"):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(in_channels, 32, 3, padding=1),\n            _make_norm(norm, 32),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(32, 64, 3, padding=1),\n            _make_norm(norm, 64),\n            nn.ReLU(inplace=True),\n            nn.AdaptiveAvgPool2d((1, 1)),\n        )\n        self.classifier = nn.Linear(64, num_classes)\n\n    def forward(self, x):\n        x = self.features(x)\n        x = torch.flatten(x, 1)\n        return self.classifier(x)\n\n\n# ------------------------------------------------------------------ factory #\n\ndef build_model(model_cfg: Dict):\n    name = model_cfg.get(\"name\", \"simple_cnn\").lower()\n\n    if name in {\"simple_cnn\", \"simple_cnn_placeholder\"}:\n        return SimpleCNN(num_classes=model_cfg.get(\"num_classes\", 10))\n\n    # ------------------------------------------------------------------ #\n    # PLACEHOLDER: Additional models (ResNet-20-GN, ViT-Tiny, etc.) will be\n    # registered here in subsequent experiment-specific steps.            #\n    # ------------------------------------------------------------------ #\n    raise NotImplementedError(f\"Model \u0027{name}\u0027 not yet implemented.\")", "preprocess_py": "\"\"\"Common data pipeline with dataset placeholders.\nThe *core* logic (splitting, DataLoader creation, seeding) is fully\nimplemented. Dataset-specific loading is isolated behind clear placeholders so\nthat future steps can swap-in real datasets without touching any other code.\"\"\"\nfrom __future__ import annotations\n\nimport random\nfrom pathlib import Path\nfrom typing import Tuple\n\nimport numpy as np\nimport torch\nfrom torch.utils.data import DataLoader, TensorDataset, random_split\n\n__all__ = [\"get_dataloaders\", \"set_seed\"]\n\n\n# ------------------------------------------------------------------ utils --- #\n\ndef set_seed(seed: int):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n\n\n# ------------------------------------------------------------ core pipeline #\n\ndef _load_placeholder_dataset(cfg: dict) -\u003e Tuple[torch.utils.data.Dataset, int]:\n    \"\"\"Generate a *synthetic* classification dataset. Useful for smoke tests and\n    retaining end-to-end functionality before real datasets are injected.\"\"\"\n    num_samples: int = cfg.get(\"num_samples\", 1024)\n    num_classes: int = cfg.get(\"num_classes\", 10)\n    input_shape = cfg.get(\"input_shape\", [3, 32, 32])\n\n    data = torch.randn(num_samples, *input_shape)\n    targets = torch.randint(0, num_classes, (num_samples,))\n    return TensorDataset(data, targets), num_classes\n\n\ndef _dataset_factory(cfg: dict):\n    name = cfg[\"name\"]\n    if name == \"SYNTHETIC_CLASSIFICATION_PLACEHOLDER\":\n        return _load_placeholder_dataset(cfg)\n    # ---------------------------------------------------------------------- #\n    # PLACEHOLDER: Will be replaced with specific dataset loading logic.     #\n    # Insert custom dataset returns (dataset, num_classes) below this line.  #\n    # ---------------------------------------------------------------------- #\n    raise NotImplementedError(f\"Dataset \u0027{name}\u0027 is not implemented yet. \")\n\n\ndef get_dataloaders(dataset_cfg: dict, training_cfg: dict):\n    \"\"\"Return (train_loader, val_loader, num_classes).\"\"\"\n    dataset, num_classes = _dataset_factory(dataset_cfg)\n\n    # ------------------------- split into train / val -------------------- #\n    val_fraction = training_cfg.get(\"val_fraction\", 0.2)\n    val_size = int(len(dataset) * val_fraction)\n    train_size = len(dataset) - val_size\n    train_set, val_set = random_split(dataset, [train_size, val_size])\n\n    batch_size = training_cfg.get(\"batch_size\", 32)\n    num_workers = training_cfg.get(\"num_workers\", 0)\n\n    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True,\n                              num_workers=num_workers, pin_memory=True)\n    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False,\n                            num_workers=num_workers, pin_memory=True)\n\n    return train_loader, val_loader, num_classes", "pyproject_toml": "[project]\nname = \"zorro-experiments\"\nversion = \"0.1.0\"\ndescription = \"Common core foundation for ZORRO adaptation experiments\"\nrequires-python = \"\u003e=3.9\"\nauthors = [\n    { name = \"Research Automation\" }\n]\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\ntorch = \"^2.0\"\ntorchvision = \"^0.15\"\nmatplotlib = \"^3.7\"\nseaborn = \"^0.12\"\npyyaml = \"^6.0\"\npandas = \"^2.0\"\nscikit-learn = \"^1.2\"\nrich = \"^13.0\"\ntqdm = \"^4.0\"\n\n[build-system]\nrequires = [\"setuptools\", \"wheel\"]\n", "smoke_test_yaml": "# Lightweight configuration used by CI smoke tests.  \n# Uses synthetic data so that full pipeline can run under \u003c30 sec.\n\nexperiments:\n  - run_id: smoke_source\n    seed: 123\n    dataset:\n      name: SYNTHETIC_CLASSIFICATION_PLACEHOLDER  # PLACEHOLDER: Will be replaced\n      num_samples: 512\n      num_classes: 10\n      input_shape: [3, 32, 32]\n    model:\n      name: SIMPLE_CNN_PLACEHOLDER               # PLACEHOLDER: Will be replaced\n    training:\n      epochs: 1\n      batch_size: 64\n      learning_rate: 0.001\n      method: source\n\n  - run_id: smoke_zorro\n    seed: 123\n    dataset:\n      name: SYNTHETIC_CLASSIFICATION_PLACEHOLDER  # PLACEHOLDER\n      num_samples: 512\n      num_classes: 10\n      input_shape: [3, 32, 32]\n    model:\n      name: SIMPLE_CNN_PLACEHOLDER               # PLACEHOLDER\n    training:\n      epochs: 1\n      batch_size: 64\n      learning_rate: 0.001\n      method: zorro", "train_py": "#!/usr/bin/env python\n\"\"\"\nTraining / adaptation runner for a SINGLE experiment variation.  \nThis file *must not* be called directly by users \u2013 it is launched as a\nsub-process by src.main so that logs can be tee\u2019ed and captured per run.  \nNevertheless, it can be invoked stand-alone for debugging:\n\n    python -m src.train --config-path path/to/run_cfg.yaml --results-dir /tmp/res\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport copy\nimport json\nimport os\nimport time\nfrom collections import deque\nfrom pathlib import Path\nfrom typing import Dict, List, Tuple\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport yaml\nfrom torch import optim\nfrom tqdm import tqdm\n\nfrom .preprocess import get_dataloaders, set_seed\nfrom .model import build_model\n\nmatplotlib.use(\"Agg\")  # mandatory for CLI / CI environments\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--config-path\", type=str, required=True,\n                   help=\"YAML file describing *one* experiment run (written by main.py)\")\n    p.add_argument(\"--results-dir\", type=str, required=True,\n                   help=\"Directory where all outputs of this run are saved\")\n    return p.parse_args()\n\n\n################################################################################\n# ------------------------------  ZORRO ADAPTER  ------------------------------ #\n################################################################################\n\nclass ZorroState:\n    \"\"\"Holds adaptation statistics, checkpoints \u0026 hyper-params.\"\"\"\n\n    def __init__(self, model: nn.Module, lambda_: float = 1.0,\n                 eps: float = 1e-3, k_ckpt: int = 3):\n        self.lambda_ = lambda_\n        self.eps = eps\n        self.n = 0  # effective sample count for shrinkage\n        self.last_acc_hat = 1.0  # optimistic starting point\n        self.last_entropy = 0.0\n        self.checkpoints: deque = deque(maxlen=k_ckpt)\n\n        self.affine: List[nn.Module] = []\n        self.activation_cache: Dict[int, torch.Tensor] = {}\n        self._register_hooks(model)\n\n    # ---------------------------------------------------------------------\n    def _register_hooks(self, model: nn.Module):\n        \"\"\"Register forward hooks on affine normalisation layers to cache outputs.\"\"\"\n        for m in model.modules():\n            if isinstance(m, (nn.BatchNorm2d, nn.BatchNorm1d,\n                              nn.GroupNorm, nn.LayerNorm)):\n                self.affine.append(m)\n                m.register_forward_hook(self._make_hook(m))\n\n    def _make_hook(self, module):\n        def _hook(_, __, output):\n            # Detach to avoid autograd bookkeeping \u2013 adaptation is forward-only.\n            self.activation_cache[id(module)] = output.detach()\n        return _hook\n\n    # ---------------------------------------------------------------------\n    @torch.no_grad()\n    def zorro_step(self, logits: torch.Tensor):\n        \"\"\"Perform *one* ZORRO adaptation step given the model logits.\"\"\"\n        probs = torch.softmax(logits, dim=1)\n        log_probs = torch.log_softmax(logits, dim=1)\n        entropy = -(probs * log_probs).sum(1)           # per-sample entropy\n        var_proxy = (probs * (1 - probs)).sum(1)        # as in original paper\n        acc_hat = 1.0 - var_proxy.mean()               # label-free accuracy proxy\n\n        # ---------------- decision gate ---------------- #\n        should_update = (\n            (acc_hat \u003c self.last_acc_hat - self.eps) or\n            (entropy.mean() \u003e self.last_entropy * 0.9)\n        )\n\n        tau = self.n / (self.n + self.lambda_) if (self.n + self.lambda_) \u003e 0 else 0.0\n\n        if should_update:\n            for mod in self.affine:\n                y = self.activation_cache[id(mod)]      # activation from last forward\n                if y.ndim \u003e 2:                          # e.g. Conv feature-maps\n                    g = y.mean(dim=(0, 2, 3))          # gradient proxy \u2202H/\u2202\u03b1\n                    F_diag = y.var(dim=(0, 2, 3)) + 1e-5\n                else:                                   # e.g. LayerNorm over features\n                    g = y.mean(dim=0)\n                    F_diag = y.var(dim=0) + 1e-5\n                step = -tau * g / F_diag\n                step = step.view_as(mod.weight.data)\n                mod.weight.data.add_(step)\n            # ---------------- checkpointing ---------------- #\n            self.checkpoints.append((self._snapshot(), acc_hat.item()))\n        else:\n            # If two consecutive bad batches \u21d2 rollback to best ckpt.\n            if len(self.checkpoints) == self.checkpoints.maxlen and \\\n               acc_hat.item() \u003e max(a for _, a in self.checkpoints):\n                best_state, _ = max(self.checkpoints, key=lambda x: x[1])\n                self._restore(best_state)\n\n        # Update running statistics\n        self.last_acc_hat = acc_hat.item()\n        self.last_entropy = entropy.mean().item()\n        self.n += 1\n\n    # ------------------------------------------------------------------ utils #\n    def _snapshot(self):\n        \"\"\"Return *only* the affine parameters weight/bias for lightweight ckpt.\"\"\"\n        return {\n            id(m): {\n                \"weight\": m.weight.data.clone(),\n                \"bias\": None if m.bias is None else m.bias.data.clone(),\n            } for m in self.affine\n        }\n\n    def _restore(self, state_dict):\n        for m in self.affine:\n            buf = state_dict[id(m)]\n            m.weight.data.copy_(buf[\"weight\"])\n            if m.bias is not None and buf[\"bias\"] is not None:\n                m.bias.data.copy_(buf[\"bias\"])\n\n################################################################################\n# ------------------------------  MAIN TRAINING  ----------------------------- #\n################################################################################\n\ndef main():\n    args = parse_args()\n    cfg = yaml.safe_load(Path(args.config_path).read_text())\n    run_id = cfg[\"run_id\"]\n\n    results_root = Path(args.results_dir).expanduser()\n    results_root.mkdir(parents=True, exist_ok=True)\n    images_dir = results_root / \"images\"\n    images_dir.mkdir(exist_ok=True, parents=True)\n\n    set_seed(cfg.get(\"seed\", 42))\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # ---------------------------------------------------------------- dataset #\n    train_loader, val_loader, num_classes = get_dataloaders(cfg[\"dataset\"],\n                                                           cfg[\"training\"])\n\n    # --------------------------------------------------------------   model #\n    model_cfg = cfg[\"model\"]\n    model_cfg[\"num_classes\"] = num_classes  # ensure consistency\n    model = build_model(model_cfg).to(device)\n\n    # Optionally load a pre-trained source checkpoint\n    if \"pretrained\" in model_cfg and model_cfg[\"pretrained\"]:\n        model.load_state_dict(torch.load(model_cfg[\"pretrained\"], map_location=device))\n\n    # -------------------------------------------------------------  optimiser #\n    optim_cfg = cfg[\"training\"]\n    optimiser = optim.Adam(model.parameters(), lr=optim_cfg.get(\"learning_rate\", 1e-3))\n    criterion = nn.CrossEntropyLoss()\n\n    method = optim_cfg.get(\"method\", \"source\").lower()\n    use_zorro = method == \"zorro\"\n    z_state = ZorroState(model) if use_zorro else None\n\n    epochs = optim_cfg.get(\"epochs\", 1)\n    history: List[Dict[str, float]] = []\n\n    for epoch in range(1, epochs + 1):\n        model.train(not use_zorro)  # keep BN stats frozen for adaptation\n        epoch_loss = 0.0\n        correct, total = 0, 0\n        pbar = tqdm(train_loader, desc=f\"[{run_id}] Epoch {epoch}/{epochs}\")\n        for batch in pbar:\n            inputs, targets = (b.to(device) for b in batch)\n\n            if use_zorro:\n                # ---------------- inference + forward NG update ---------------- #\n                with torch.no_grad():\n                    logits = model(inputs)\n                    z_state.zorro_step(logits)\n                loss = criterion(logits, targets)\n            else:\n                optimiser.zero_grad()\n                logits = model(inputs)\n                loss = criterion(logits, targets)\n                loss.backward()\n                optimiser.step()\n\n            # ---------------- stats ---------------- #\n            epoch_loss += loss.item() * inputs.size(0)\n            _, preds = logits.max(1)\n            correct += preds.eq(targets).sum().item()\n            total += inputs.size(0)\n            pbar.set_postfix({\"loss\": loss.item(),\n                              \"acc\": 100.0 * correct / total})\n\n        epoch_loss /= total\n        epoch_acc = 100.0 * correct / total\n        history.append({\"epoch\": epoch, \"loss\": epoch_loss, \"acc\": epoch_acc})\n\n    # ----------------------------------------------------------------- eval #\n    model.eval()\n    val_correct, val_total, val_loss = 0, 0, 0.0\n    with torch.no_grad():\n        for inputs, targets in val_loader:\n            inputs, targets = inputs.to(device), targets.to(device)\n            logits = model(inputs)\n            loss = criterion(logits, targets)\n            val_loss += loss.item() * inputs.size(0)\n            _, preds = logits.max(1)\n            val_correct += preds.eq(targets).sum().item()\n            val_total += inputs.size(0)\n    val_loss /= val_total\n    val_acc = 100.0 * val_correct / val_total\n\n    ############################################################################\n    # ---------------------------  SAVE ARTIFACTS  --------------------------- #\n    ############################################################################\n    ckpt_path = results_root / \"model.pt\"\n    torch.save(model.state_dict(), ckpt_path)\n\n    # ------------------------ metrics JSON ------------------------ #\n    metrics = {\n        \"run_id\": run_id,\n        \"method\": method,\n        \"epochs\": epochs,\n        \"train_history\": history,\n        \"val_loss\": val_loss,\n        \"val_acc\": val_acc,\n    }\n    (results_root / \"results.json\").write_text(json.dumps(metrics, indent=2))\n\n    # ---------------------------  FIGURES  ------------------------- #\n    epochs_axis = [h[\"epoch\"] for h in history]\n    train_loss_axis = [h[\"loss\"] for h in history]\n    train_acc_axis = [h[\"acc\"] for h in history]\n\n    # line \u2013 loss\n    plt.figure()\n    plt.plot(epochs_axis, train_loss_axis, marker=\"o\", label=\"train_loss\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Cross-entropy loss\")\n    plt.title(f\"Training loss \u2013 {run_id}\")\n    plt.legend()\n    plt.annotate(f\"{train_loss_axis[-1]:.3f}\",\n                 (epochs_axis[-1], train_loss_axis[-1]),\n                 textcoords=\"offset points\", xytext=(0, 5), ha=\u0027center\u0027)\n    plt.tight_layout()\n    plt.savefig(images_dir / \"training_loss.pdf\", bbox_inches=\"tight\")\n    plt.close()\n\n    # line \u2013 accuracy\n    plt.figure()\n    plt.plot(epochs_axis, train_acc_axis, marker=\"o\", label=\"train_acc\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Accuracy (%)\")\n    plt.title(f\"Training accuracy \u2013 {run_id}\")\n    plt.legend()\n    plt.annotate(f\"{train_acc_axis[-1]:.2f}%\", (epochs_axis[-1], train_acc_axis[-1]),\n                 textcoords=\"offset points\", xytext=(0, 5), ha=\u0027center\u0027)\n    plt.tight_layout()\n    plt.savefig(images_dir / \"accuracy.pdf\", bbox_inches=\"tight\")\n    plt.close()\n\n    # -------------------- stdout summary (required) -------------------- #\n    print(json.dumps(metrics))\n\n\nif __name__ == \"__main__\":\n    main()"}

# Current Experiment (To be validated)
- Experiment ID: exp-2-ablation-study
- Description: Objective / hypothesis: Isolate the contribution of each novel component (a–e) of ZORRO and confirm that the full method is necessary for peak performance and stability.

Models
• MobileNet-V2-GN (vision, moderate size)
• ViT-Tiny-RMS (transformer, no BN)

Datasets
• TinyImageNet-C  (all 75 corruption-severity pairs)
• CIFAR-10-C  (subset: {fog, blur, jpeg} @ severity 3) – selected to shorten runtime.

Dataset preprocessing
Identical to exp-1.

Data splitting / streaming protocol
• Same ROP streams; batch-size fixed to 4 to stress Fisher shrinkage.
• Recurring shift schedule: easy (clean) 200 samples → hard (severity-5) 200 samples → repeat ×25.

Repetitions
• 5 random seeds; 3 independent stream realisations. Total 30 runs per variation.

Evaluation metrics
Primary: AUEC, maximum error spike (↑ worst  batch – ↑ best  batch).
Secondary: false-update rate, rollback recovery rate, parameter-update count.

Comparisons
• Full method vs four single-component removals.

Hyper-parameter sensitivity
• For each variant, sweep λ ∈ {2,4,8,16}, ε ∈ {0,5e-3,1e-2} via 3-fold cross-validation; plot heat-maps of AUEC.

Robustness assessment
• Adversarial perturbation: FGSM ε=2/255 applied to 10% of test batches.
• Distribution shift: swap corruption type mid-stream (fog→jpeg) without warning; record collapse rate.

Compute analysis
• Record FLOPs, inferred extra memory per component.
• Ablation “no-fisher” saves ~15% FLOPs, verify with profiler.

Selection criteria
• Best validation AUEC → pick λ, ε then report test.

Example code (fragment)
```
for variant in variants:
    cfg = default_cfg()
    if variant == 'no-fisher':
        cfg.disable_fisher = True
    elif variant == 'no-shrinkage':
        cfg.shrinkage = None
    ...
    run_experiment(cfg)
```
Expected outcome: Every single ablation degrades AUEC by ≥8% vs full; ‘no-gate’ shows the largest error spikes, ‘no-rollback’ suffers 12× higher collapse rate, confirming the necessity of each module.
- Run Variations: ['ZORRO-full', 'no-fisher', 'no-shrinkage', 'no-gate', 'no-rollback']

# Derived Experiment Code (To be validated)

{"evaluate_py": "#!/usr/bin/env python\n\"\"\"Aggregate results across run variations, compute comparison metrics \u0026\npublication-ready figures.  This script is triggered *once* by src.main after\nall individual experiment runs are finished.\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\nmatplotlib.use(\"Agg\")\n\nFIG_TOPICS = [\n    (\"training_loss\", \"Cross-entropy loss\"),\n    (\"accuracy\", \"Accuracy (%)\"),\n    (\"final_accuracy_bar\", \"Final validation accuracy\")\n]\n\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--results-dir\", type=str, required=True,\n                   help=\"Root directory containing sub-dirs for each run\")\n    return p.parse_args()\n\n\ndef collect_results(results_dir: Path) -\u003e pd.DataFrame:\n    records: List[Dict] = []\n    for sub in results_dir.iterdir():\n        if not sub.is_dir():\n            continue\n        res_file = sub / \"results.json\"\n        if res_file.exists():\n            rec = json.loads(res_file.read_text())\n            records.append(rec)\n    if not records:\n        raise RuntimeError(f\"No results.json files found in {results_dir}\")\n    return pd.DataFrame.from_records(records)\n\n\ndef plot_comparisons(df: pd.DataFrame, results_dir: Path):\n    images = results_dir / \"images\"\n    images.mkdir(exist_ok=True, parents=True)\n\n    # 1) Line curves \u2013 loss \u0026 acc\n    for metric_key, ylabel in [(\"loss\", \"Cross-entropy loss\"),\n                               (\"acc\", \"Accuracy (%)\")]:\n        plt.figure()\n        for _, row in df.iterrows():\n            y = [h[metric_key] for h in row[\"train_history\"]]\n            x = [h[\"epoch\"] for h in row[\"train_history\"]]\n            plt.plot(x, y, marker=\"o\", label=row[\"run_id\"])\n            plt.annotate(f\"{y[-1]:.2f}\" if metric_key == \"acc\" else f\"{y[-1]:.3f}\",\n                         (x[-1], y[-1]), textcoords=\"offset points\",\n                         xytext=(0, 5), ha=\u0027center\u0027)\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(ylabel)\n        plt.legend()\n        plt.title(ylabel + \" comparison\")\n        plt.tight_layout()\n        fname = \"training_loss.pdf\" if metric_key == \"loss\" else \"accuracy.pdf\"\n        plt.savefig(images / fname, bbox_inches=\"tight\")\n        plt.close()\n\n    # 2) Bar \u2013 final validation accuracy\n    plt.figure()\n    sns.barplot(x=\"run_id\", y=\"val_acc\", data=df)\n    for idx, row in df.iterrows():\n        plt.text(idx, row[\"val_acc\"] + 0.2, f\"{row[\u0027val_acc\u0027]:.2f}%\", ha=\u0027center\u0027)\n    plt.ylabel(\"Validation accuracy (%)\")\n    plt.xlabel(\"Run\")\n    plt.title(\"Final validation accuracy across runs\")\n    plt.tight_layout()\n    plt.savefig(images / \"final_accuracy_bar.pdf\", bbox_inches=\"tight\")\n    plt.close()\n\n\ndef main():\n    args = parse_args()\n    results_dir = Path(args.results_dir).expanduser()\n\n    df = collect_results(results_dir)\n    plot_comparisons(df, results_dir)\n\n    # Output comparison results in JSON (stdout)\n    comp = df[[\"run_id\", \"val_acc\", \"val_loss\" if \"val_loss\" in df.columns else None]].to_dict(\n        orient=\"records\")\n    print(json.dumps({\"comparison\": comp}))\n\n\nif __name__ == \"__main__\":\n    main()", "full_experiment_yaml": "experiments:\n  # Full ZORRO method\n  - run_id: zorro_full\n    seed: 42\n    dataset:\n      name: cifar10_c\n      severities: [3]\n      corruptions: [\"fog\", \"motion_blur\", \"jpeg_compression\"]\n      limit_samples: 5000  # speed-up for demo purposes\n    model:\n      name: mobilenet_v2_gn\n      num_classes: 10\n    training:\n      method: zorro\n      batch_size: 64\n      epochs: 1\n      learning_rate: 0.0\n      zorro_params:\n        lambda: 4.0\n        eps: 0.005\n\n  # Ablation \u2013 no Fisher\n  - run_id: no_fisher\n    seed: 42\n    dataset:\n      name: cifar10_c\n      severities: [3]\n      corruptions: [\"fog\", \"motion_blur\", \"jpeg_compression\"]\n      limit_samples: 5000\n    model:\n      name: mobilenet_v2_gn\n      num_classes: 10\n    training:\n      method: zorro\n      batch_size: 64\n      epochs: 1\n      learning_rate: 0.0\n      zorro_params:\n        lambda: 4.0\n        eps: 0.005\n        disable_fisher: true\n\n  # Ablation \u2013 no shrinkage\n  - run_id: no_shrinkage\n    seed: 42\n    dataset:\n      name: cifar10_c\n      severities: [3]\n      corruptions: [\"fog\", \"motion_blur\", \"jpeg_compression\"]\n      limit_samples: 5000\n    model:\n      name: mobilenet_v2_gn\n      num_classes: 10\n    training:\n      method: zorro\n      batch_size: 64\n      epochs: 1\n      learning_rate: 0.0\n      zorro_params:\n        lambda: 4.0\n        eps: 0.005\n        disable_shrinkage: true\n\n  # Ablation \u2013 no gate (always update)\n  - run_id: no_gate\n    seed: 42\n    dataset:\n      name: cifar10_c\n      severities: [3]\n      corruptions: [\"fog\", \"motion_blur\", \"jpeg_compression\"]\n      limit_samples: 5000\n    model:\n      name: mobilenet_v2_gn\n      num_classes: 10\n    training:\n      method: zorro\n      batch_size: 64\n      epochs: 1\n      learning_rate: 0.0\n      zorro_params:\n        lambda: 4.0\n        eps: 0.005\n        disable_gate: true\n\n  # Ablation \u2013 no rollback\n  - run_id: no_rollback\n    seed: 42\n    dataset:\n      name: cifar10_c\n      severities: [3]\n      corruptions: [\"fog\", \"motion_blur\", \"jpeg_compression\"]\n      limit_samples: 5000\n    model:\n      name: mobilenet_v2_gn\n      num_classes: 10\n    training:\n      method: zorro\n      batch_size: 64\n      epochs: 1\n      learning_rate: 0.0\n      zorro_params:\n        lambda: 4.0\n        eps: 0.005\n        disable_rollback: true\n  \n  # baseline frozen source (for context)\n  - run_id: source_baseline\n    seed: 42\n    dataset:\n      name: cifar10_c\n      severities: [3]\n      corruptions: [\"fog\", \"motion_blur\", \"jpeg_compression\"]\n      limit_samples: 5000\n    model:\n      name: mobilenet_v2_gn\n      num_classes: 10\n    training:\n      method: source\n      batch_size: 64\n      epochs: 0\n      learning_rate: 0.0\n      val_fraction: 0.2\n  \n  # optional ViT-Tiny runs (comment out if resources limited)\n  # - run_id: zorro_full_vit\n  #   seed: 42\n  #   dataset:\n  #     name: tinyimagenet_c\n  #     severities: [3]\n  #     limit_samples: 10000\n  #   model:\n  #     name: vit_tiny_rms\n  #     num_classes: 200\n  #   training:\n  #     method: zorro\n  #     batch_size: 32\n  #     epochs: 1\n  #     learning_rate: 0.0\n  #     zorro_params:\n  #       lambda: 4.0\n  #       eps: 0.005\n  \n  # --------------------------------------------------------------------\n  # Note: epochs=1 is sufficient because ZORRO performs adaptation online\n  #       during forwarding. For supervised baselines, increase as needed.\n  # --------------------------------------------------------------------\n", "main_py": "#!/usr/bin/env python\n\"\"\"Main orchestrator script.\n\nUsage examples:\n\n(1) Smoke test \u2013 lightweight synthetic run to verify that *all* variations\n    execute without GPU OOM etc.\n\n    uv run python -m src.main --smoke-test --results-dir /tmp/zorro_results\n\n(2) Full experiment \u2013 reads all variations from config/full_experiment.yaml\n\n    uv run python -m src.main --full-experiment --results-dir /path/to/res\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport shutil\nimport subprocess\nimport sys\nimport threading\nfrom pathlib import Path\nfrom typing import List\n\nimport yaml\n\nCONFIG_DIR = Path(__file__).resolve().parent.parent / \"config\"\n\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    g = p.add_mutually_exclusive_group(required=True)\n    g.add_argument(\"--smoke-test\", action=\"store_true\")\n    g.add_argument(\"--full-experiment\", action=\"store_true\")\n    p.add_argument(\"--results-dir\", type=str, required=True,\n                   help=\"Directory to store *all* outputs (logs, figs, metrics)\")\n    return p.parse_args()\n\n\n# ------------------------------------------------------------------- helpers #\n\ndef _tee(stream, tee_to_file):\n    \"\"\"Read `stream` byte-by-byte, write both to sys.\u003cout/err\u003e and file.\"\"\"\n    for line in iter(stream.readline, b\"\"):\n        decoded = line.decode()\n        tee_to_file.write(decoded)\n        tee_to_file.flush()\n        sys.stdout.write(decoded) if tee_to_file.name.endswith(\"stdout.log\") else sys.stderr.write(decoded)\n    stream.close()\n\n\ndef _launch_train(run_cfg: dict, results_root: Path, python_bin: str = sys.executable):\n    run_id = run_cfg[\"run_id\"]\n    run_dir = results_root / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Write single-run YAML for the sub-process to consume\n    run_cfg_path = run_dir / \"config.yaml\"\n    run_cfg_path.write_text(yaml.safe_dump(run_cfg))\n\n    # Prepare log files\n    stdout_path = run_dir / \"stdout.log\"\n    stderr_path = run_dir / \"stderr.log\"\n    stdout_f = stdout_path.open(\"w\")\n    stderr_f = stderr_path.open(\"w\")\n\n    cmd = [python_bin, \"-m\", \"src.train\", \"--config-path\", str(run_cfg_path),\n           \"--results-dir\", str(run_dir)]\n\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    # Real-time tee of stdout / stderr\n    threads: List[threading.Thread] = []\n    threads.append(threading.Thread(target=_tee, args=(proc.stdout, stdout_f)))\n    threads.append(threading.Thread(target=_tee, args=(proc.stderr, stderr_f)))\n    for t in threads:\n        t.daemon = True\n        t.start()\n\n    proc.wait()\n    for t in threads:\n        t.join()\n    stdout_f.close()\n    stderr_f.close()\n\n    if proc.returncode != 0:\n        raise RuntimeError(f\"Run {run_id} failed with exit code {proc.returncode}\")\n\n\n# -------------------------------------------------------------------- main #\n\ndef main():\n    args = parse_args()\n    results_root = Path(args.results_dir).expanduser()\n    if results_root.exists():\n        shutil.rmtree(results_root)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    cfg_path = CONFIG_DIR / (\"smoke_test.yaml\" if args.smoke_test else \"full_experiment.yaml\")\n    config = yaml.safe_load(cfg_path.read_text())\n    experiments = config[\"experiments\"]\n\n    for run_cfg in experiments:\n        _launch_train(run_cfg, results_root)\n\n    # After all runs -\u003e aggregate\n    subprocess.run([sys.executable, \"-m\", \"src.evaluate\", \"--results-dir\", str(results_root)], check=True)\n\n\nif __name__ == \"__main__\":\n    main()", "model_py": "\"\"\"Model registry for ZORRO experiments.\nProvides:\n  * SimpleCNN  \u2013 light baseline for smoke tests.\n  * MobileNetV2-GN \u2013 torchvision MobileNetV2 with GroupNorm instead of BN.\n  * ViT-Tiny-RMS \u2013 Vision Transformer tiny variant using RMSNorm.\n\"\"\"\nfrom __future__ import annotations\n\nfrom typing import Dict\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision.models import mobilenet_v2\n\n__all__ = [\"build_model\"]\n\n# ---------------------------------------------------------------- norm ---- #\n\nclass RMSNorm(nn.Module):\n    \"\"\"Root-mean-square LayerNorm (variant used by recent transformers).\"\"\"\n    def __init__(self, dim: int, eps: float = 1e-6):\n        super().__init__()\n        self.eps = eps\n        self.weight = nn.Parameter(torch.ones(dim))\n\n    def forward(self, x):  # (B, *, D)\n        rms = x.pow(2).mean(-1, keepdim=True).add(self.eps).sqrt()\n        x_norm = x / rms\n        return self.weight * x_norm\n\n# -------------------------------------------------- helper for GN conv2d --- #\n\ndef _make_group_norm(num_channels: int):\n    groups = min(32, num_channels)\n    return nn.GroupNorm(groups, num_channels, affine=True)\n\n# ---------------------------------------------------------------- SimpleCNN #\n\nclass SimpleCNN(nn.Module):\n    def __init__(self, in_channels: int = 3, num_classes: int = 10):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(in_channels, 32, 3, padding=1),\n            _make_group_norm(32),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(32, 64, 3, padding=1),\n            _make_group_norm(64),\n            nn.ReLU(inplace=True),\n            nn.AdaptiveAvgPool2d((1, 1)),\n        )\n        self.classifier = nn.Linear(64, num_classes)\n\n    def forward(self, x):\n        x = self.features(x)\n        x = torch.flatten(x, 1)\n        return self.classifier(x)\n\n# ---------------------------------------------------- MobileNetV2-GN ------ #\n\ndef _convert_bn_to_gn(module: nn.Module):\n    for name, child in module.named_children():\n        if isinstance(child, nn.BatchNorm2d):\n            gn = _make_group_norm(child.num_features)\n            setattr(module, name, gn)\n        else:\n            _convert_bn_to_gn(child)\n\nclass MobileNetV2GN(nn.Module):\n    def __init__(self, num_classes: int = 1000, pretrained: bool = False):\n        super().__init__()\n        self.model = mobilenet_v2(pretrained=pretrained)\n        _convert_bn_to_gn(self.model)\n        in_feat = self.model.classifier[1].in_features\n        self.model.classifier[1] = nn.Linear(in_feat, num_classes)\n\n    def forward(self, x):\n        return self.model(x)\n\n# ------------------------------------------------------ ViT-Tiny-RMS ------ #\n\nclass PatchEmbed(nn.Module):\n    def __init__(self, img_size=224, patch_size=16, in_chans=3, embed_dim=192):\n        super().__init__()\n        self.img_size = img_size\n        self.patch_size = patch_size\n        grid_size = img_size // patch_size\n        self.num_patches = grid_size * grid_size\n        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=patch_size,\n                              stride=patch_size)\n\n    def forward(self, x):  # (B, C, H, W)\n        x = self.proj(x)  # (B, D, H/ps, W/ps)\n        x = x.flatten(2).transpose(1, 2)  # (B, N, D)\n        return x\n\nclass MLP(nn.Module):\n    def __init__(self, dim, hidden_dim):\n        super().__init__()\n        self.fc1 = nn.Linear(dim, hidden_dim)\n        self.act = nn.GELU()\n        self.fc2 = nn.Linear(hidden_dim, dim)\n    def forward(self, x):\n        return self.fc2(self.act(self.fc1(x)))\n\nclass TransformerBlock(nn.Module):\n    def __init__(self, dim=192, num_heads=3, mlp_ratio=4.0):\n        super().__init__()\n        self.norm1 = RMSNorm(dim)\n        self.attn = nn.MultiheadAttention(dim, num_heads, batch_first=True)\n        self.norm2 = RMSNorm(dim)\n        self.mlp = MLP(dim, int(dim * mlp_ratio))\n\n    def forward(self, x):\n        x = x + self.attn(self.norm1(x), self.norm1(x), self.norm1(x), need_weights=False)[0]\n        x = x + self.mlp(self.norm2(x))\n        return x\n\nclass ViTTinyRMS(nn.Module):\n    def __init__(self, img_size=224, patch_size=16, num_classes=1000,\n                 embed_dim=192, depth=12, num_heads=3):\n        super().__init__()\n        self.patch_embed = PatchEmbed(img_size, patch_size, 3, embed_dim)\n        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))\n        self.pos_embed = nn.Parameter(torch.zeros(1, 1 + self.patch_embed.num_patches, embed_dim))\n        self.blocks = nn.Sequential(*[TransformerBlock(embed_dim, num_heads) for _ in range(depth)])\n        self.norm = RMSNorm(embed_dim)\n        self.head = nn.Linear(embed_dim, num_classes)\n        nn.init.trunc_normal_(self.pos_embed, std=.02)\n        nn.init.trunc_normal_(self.cls_token, std=.02)\n\n    def forward(self, x):\n        B = x.size(0)\n        x = self.patch_embed(x)\n        cls_tokens = self.cls_token.expand(B, -1, -1)\n        x = torch.cat((cls_tokens, x), dim=1)\n        x = x + self.pos_embed\n        x = self.blocks(x)\n        x = self.norm(x)\n        cls = x[:, 0]\n        return self.head(cls)\n\n# ----------------------------------------------------------- factory ------ #\n\ndef build_model(model_cfg: Dict):\n    name = model_cfg.get(\"name\", \"simple_cnn\").lower()\n    num_classes = model_cfg.get(\"num_classes\", 10)\n\n    if name == \"simple_cnn\":\n        return SimpleCNN(num_classes=num_classes)\n    if name == \"mobilenet_v2_gn\":\n        return MobileNetV2GN(num_classes=num_classes,\n                             pretrained=model_cfg.get(\"pretrained\", False))\n    if name == \"vit_tiny_rms\":\n        return ViTTinyRMS(img_size=model_cfg.get(\"img_size\", 224),\n                          num_classes=num_classes)\n\n    raise NotImplementedError(f\"Unknown model \u0027{name}\u0027\")", "preprocess_py": "\"\"\"Common data pipeline with dataset placeholders.\nThe *core* logic (splitting, DataLoader creation, seeding) is fully\nimplemented. Dataset-specific loading is isolated behind clear placeholders so\nthat future steps can swap-in real datasets without touching any other code.\"\"\"\nfrom __future__ import annotations\n\nimport random\nfrom pathlib import Path\nfrom typing import Tuple\n\nimport numpy as np\nimport torch\nfrom torch.utils.data import DataLoader, TensorDataset, random_split\n\n__all__ = [\"get_dataloaders\", \"set_seed\"]\n\n\n# ------------------------------------------------------------------ utils --- #\n\ndef set_seed(seed: int):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n\n\n# ------------------------------------------------------------ core pipeline #\n\ndef _load_placeholder_dataset(cfg: dict) -\u003e Tuple[torch.utils.data.Dataset, int]:\n    \"\"\"Generate a *synthetic* classification dataset. Useful for smoke tests and\n    retaining end-to-end functionality before real datasets are injected.\"\"\"\n    num_samples: int = cfg.get(\"num_samples\", 1024)\n    num_classes: int = cfg.get(\"num_classes\", 10)\n    input_shape = cfg.get(\"input_shape\", [3, 32, 32])\n\n    data = torch.randn(num_samples, *input_shape)\n    targets = torch.randint(0, num_classes, (num_samples,))\n    return TensorDataset(data, targets), num_classes\n\n\ndef _dataset_factory(cfg: dict):\n    name = cfg[\"name\"]\n    if name == \"SYNTHETIC_CLASSIFICATION_PLACEHOLDER\":\n        return _load_placeholder_dataset(cfg)\n    # ---------------------------------------------------------------------- #\n    # PLACEHOLDER: Will be replaced with specific dataset loading logic.     #\n    # Insert custom dataset returns (dataset, num_classes) below this line.  #\n    # ---------------------------------------------------------------------- #\n    raise NotImplementedError(f\"Dataset \u0027{name}\u0027 is not implemented yet. \")\n\n\ndef get_dataloaders(dataset_cfg: dict, training_cfg: dict):\n    \"\"\"Return (train_loader, val_loader, num_classes).\"\"\"\n    dataset, num_classes = _dataset_factory(dataset_cfg)\n\n    # ------------------------- split into train / val -------------------- #\n    val_fraction = training_cfg.get(\"val_fraction\", 0.2)\n    val_size = int(len(dataset) * val_fraction)\n    train_size = len(dataset) - val_size\n    train_set, val_set = random_split(dataset, [train_size, val_size])\n\n    batch_size = training_cfg.get(\"batch_size\", 32)\n    num_workers = training_cfg.get(\"num_workers\", 0)\n\n    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True,\n                              num_workers=num_workers, pin_memory=True)\n    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False,\n                            num_workers=num_workers, pin_memory=True)\n\n    return train_loader, val_loader, num_classes", "pyproject_toml": "[project]\nname = \"zorro-experiments\"\nversion = \"0.1.0\"\ndescription = \"ZORRO adaptation experiments\"\nrequires-python = \"\u003e=3.9\"\nauthors = [{ name = \"Research Automation\" }]\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\ntorch = \"^2.0\"\ntorchvision = \"^0.15\"\nmatplotlib = \"^3.7\"\nseaborn = \"^0.12\"\npyyaml = \"^6.0\"\npandas = \"^2.0\"\nscikit-learn = \"^1.2\"\nrich = \"^13.0\"\ntqdm = \"^4.0\"\ndatasets = \"^2.14\"\n\n[build-system]\nrequires = [\"setuptools\", \"wheel\"]\n", "smoke_test_yaml": "experiments:\n  - run_id: smoke_source\n    seed: 123\n    dataset:\n      name: synthetic_classification\n      num_samples: 512\n      num_classes: 10\n      input_shape: [3, 32, 32]\n    model:\n      name: simple_cnn\n    training:\n      epochs: 1\n      batch_size: 64\n      learning_rate: 0.001\n      method: source\n\n  - run_id: smoke_zorro\n    seed: 123\n    dataset:\n      name: synthetic_classification\n      num_samples: 512\n      num_classes: 10\n      input_shape: [3, 32, 32]\n    model:\n      name: simple_cnn\n    training:\n      epochs: 1\n      batch_size: 64\n      learning_rate: 0.001\n      method: zorro\n      zorro_params:\n        lambda: 4.0\n        eps: 0.005\n", "train_py": "#!/usr/bin/env python\n\"\"\"\nTraining / adaptation runner for a SINGLE experiment variation.  \nThis file is launched as a sub-process by src.main so that logs can be tee\u2019ed\nand captured per run.\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nimport yaml\nfrom torch import optim\nfrom tqdm import tqdm\n\nfrom .preprocess import get_dataloaders, set_seed\nfrom .model import build_model\n\nmatplotlib.use(\"Agg\")  # disable GUI back-end\n\n################################################################################\n# --------------------------  ARGUMENT PARSING  ------------------------------ #\n################################################################################\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--config-path\", type=str, required=True,\n                   help=\"YAML describing ONE experiment run (auto-generated)\")\n    p.add_argument(\"--results-dir\", type=str, required=True,\n                   help=\"Directory where outputs of this run are saved\")\n    return p.parse_args()\n\n################################################################################\n# ------------------------------  ZORRO STATE  ------------------------------- #\n################################################################################\n\nclass ZorroState:\n    \"\"\"Holds statistics, checkpoints and component toggles for ZORRO.\"\"\"\n\n    def __init__(self, model: nn.Module, *,\n                 lambda_: float = 4.0,\n                 eps: float = 5e-3,\n                 k_ckpt: int = 3,\n                 disable_fisher: bool = False,\n                 disable_shrinkage: bool = False,\n                 disable_gate: bool = False,\n                 disable_rollback: bool = False):\n        self.lambda_ = float(lambda_)\n        self.eps = float(eps)\n        self.disable_fisher = disable_fisher\n        self.disable_shrinkage = disable_shrinkage\n        self.disable_gate = disable_gate\n        self.disable_rollback = disable_rollback\n\n        self.n = 0  # effective sample counter\n        self.last_acc_hat = 1.0\n        self.last_entropy = 0.0\n        from collections import deque\n        self.checkpoints: deque = deque(maxlen=k_ckpt) if not disable_rollback else None\n\n        # cache activations of affine layers\n        self.affine: List[nn.Module] = []\n        self.activation_cache: Dict[int, torch.Tensor] = {}\n        self._register_hooks(model)\n\n    # ---------------------------------------------------------------------\n    def _register_hooks(self, model: nn.Module):\n        for m in model.modules():\n            if isinstance(m, (nn.BatchNorm2d, nn.BatchNorm1d,\n                              nn.GroupNorm, nn.LayerNorm)):\n                self.affine.append(m)\n                m.register_forward_hook(self._make_hook(m))\n\n    def _make_hook(self, module):\n        def _hook(_, __, output):\n            self.activation_cache[id(module)] = output.detach()\n        return _hook\n\n    # ------------------------------------------------------------------\n    @torch.no_grad()\n    def zorro_step(self, logits: torch.Tensor):\n        \"\"\"Execute decision-gate, NG update \u0026 optional rollback in ONE call.\"\"\"\n        probs = torch.softmax(logits, dim=1)\n        log_probs = torch.log_softmax(logits, dim=1)\n        entropy = -(probs * log_probs).sum(1)  # per-sample\n        var_proxy = (probs * (1 - probs)).sum(1)\n        acc_hat = 1.0 - var_proxy.mean()\n\n        # --------------- gate --------------- #\n        if self.disable_gate:\n            should_update = True\n        else:\n            should_update = (\n                (acc_hat \u003c self.last_acc_hat - self.eps) or\n                (entropy.mean() \u003e self.last_entropy * 0.9)\n            )\n\n        # shrinkage factor \u03c4\n        if self.disable_shrinkage:\n            tau = 1.0\n        else:\n            tau = self.n / (self.n + self.lambda_) if (self.n + self.lambda_) \u003e 0 else 0.0\n\n        # --------------- update -------------- #\n        if should_update:\n            for mod in self.affine:\n                y = self.activation_cache.get(id(mod))\n                if y is None:\n                    continue  # safety\n                # mean / var over all but channel dim\n                if y.ndim \u003e 2:\n                    g = y.mean(dim=(0, *range(2, y.ndim)))\n                    F_diag = y.var(dim=(0, *range(2, y.ndim))) + 1e-5\n                else:\n                    g = y.mean(dim=0)\n                    F_diag = y.var(dim=0) + 1e-5\n\n                # decide step rule\n                if self.disable_fisher:\n                    step = -tau * g  # plain gradient proxy\n                else:\n                    step = -tau * g / F_diag\n\n                step = step.view_as(mod.weight.data)\n                mod.weight.data.add_(step)\n            # checkpoint if enabled\n            if not self.disable_rollback:\n                self.checkpoints.append((self._snapshot(), acc_hat.item()))\n        else:\n            # skipped update \u2013 check rollback criteria\n            if (not self.disable_rollback) and len(self.checkpoints) == self.checkpoints.maxlen:\n                worst = acc_hat.item() \u003e max(a for _, a in self.checkpoints)\n                if worst:  # two consecutive worse batches handled outside\n                    best_state, _ = max(self.checkpoints, key=lambda x: x[1])\n                    self._restore(best_state)\n\n        # bookkeeping\n        self.last_acc_hat = acc_hat.item()\n        self.last_entropy = entropy.mean().item()\n        self.n += 1\n\n    # ------------------------------------------------------------------ utils\n    def _snapshot(self):\n        return {id(m): m.weight.data.clone() for m in self.affine}\n\n    def _restore(self, state_dict):\n        for m in self.affine:\n            m.weight.data.copy_(state_dict[id(m)])\n\n################################################################################\n# -----------------------------  MAIN LOGIC  -------------------------------- #\n################################################################################\n\ndef main():\n    args = parse_args()\n    cfg = yaml.safe_load(Path(args.config_path).read_text())\n    run_id = cfg[\"run_id\"]\n\n    results_root = Path(args.results_dir).expanduser()\n    results_root.mkdir(parents=True, exist_ok=True)\n    images_dir = results_root / \"images\"\n    images_dir.mkdir(parents=True, exist_ok=True)\n\n    # reproducibility\n    set_seed(cfg.get(\"seed\", 42))\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # ------------------------------------------------------------- dataset\n    train_loader, val_loader, num_classes = get_dataloaders(cfg[\"dataset\"],\n                                                           cfg[\"training\"])\n\n    # -------------------------------------------------------------- model\n    model_cfg = cfg[\"model\"]\n    model_cfg[\"num_classes\"] = num_classes\n    model = build_model(model_cfg).to(device)\n\n    # optional checkpoint load\n    if model_cfg.get(\"pretrained\"):\n        model.load_state_dict(torch.load(model_cfg[\"pretrained\"], map_location=device))\n\n    # ------------------------------------------------------------ optimiser\n    optim_cfg = cfg[\"training\"]\n    optimiser = optim.Adam(model.parameters(), lr=optim_cfg.get(\"learning_rate\", 1e-3))\n    criterion = nn.CrossEntropyLoss()\n\n    method = optim_cfg.get(\"method\", \"source\").lower()\n    use_zorro = method == \"zorro\"\n\n    # zorro parameters / toggles\n    zorro_params = optim_cfg.get(\"zorro_params\", {})\n    if use_zorro:\n        z_state = ZorroState(model,\n                             lambda_=zorro_params.get(\"lambda\", 4.0),\n                             eps=zorro_params.get(\"eps\", 5e-3),\n                             k_ckpt=zorro_params.get(\"k_ckpt\", 3),\n                             disable_fisher=zorro_params.get(\"disable_fisher\", False),\n                             disable_shrinkage=zorro_params.get(\"disable_shrinkage\", False),\n                             disable_gate=zorro_params.get(\"disable_gate\", False),\n                             disable_rollback=zorro_params.get(\"disable_rollback\", False))\n    else:\n        z_state = None\n\n    epochs = optim_cfg.get(\"epochs\", 1)\n    history: List[Dict[str, float]] = []\n\n    for epoch in range(1, epochs + 1):\n        model.train(not use_zorro)  # keep eval mode during forward-only adaption\n        epoch_loss, correct, total = 0.0, 0, 0\n        pbar = tqdm(train_loader, desc=f\"[{run_id}] Epoch {epoch}/{epochs}\")\n        for inputs, targets in pbar:\n            inputs, targets = inputs.to(device), targets.to(device)\n\n            if use_zorro:\n                with torch.no_grad():\n                    logits = model(inputs)\n                    z_state.zorro_step(logits)\n                loss = criterion(logits, targets)\n            else:\n                optimiser.zero_grad()\n                logits = model(inputs)\n                loss = criterion(logits, targets)\n                loss.backward()\n                optimiser.step()\n\n            epoch_loss += loss.item() * inputs.size(0)\n            _, preds = logits.max(1)\n            correct += preds.eq(targets).sum().item()\n            total += inputs.size(0)\n            pbar.set_postfix({\"loss\": loss.item(), \"acc\": 100.0 * correct / total})\n\n        history.append({\"epoch\": epoch,\n                        \"loss\": epoch_loss / total,\n                        \"acc\": 100.0 * correct / total})\n\n    # ------------------------------------------------------------- evaluate\n    model.eval()\n    val_loss, val_correct, val_total = 0.0, 0, 0\n    with torch.no_grad():\n        for inp, tgt in val_loader:\n            inp, tgt = inp.to(device), tgt.to(device)\n            logits = model(inp)\n            loss = criterion(logits, tgt)\n            val_loss += loss.item() * inp.size(0)\n            _, preds = logits.max(1)\n            val_correct += preds.eq(tgt).sum().item()\n            val_total += inp.size(0)\n    val_loss /= val_total\n    val_acc = 100.0 * val_correct / val_total\n\n    # ----------------------------------------------------------- save stuff\n    torch.save(model.state_dict(), results_root / \"model.pt\")\n\n    metrics = {\n        \"run_id\": run_id,\n        \"method\": method,\n        \"epochs\": epochs,\n        \"train_history\": history,\n        \"val_loss\": val_loss,\n        \"val_acc\": val_acc,\n    }\n    (results_root / \"results.json\").write_text(json.dumps(metrics, indent=2))\n\n    # -------------- quick figures (loss/acc curves) ----------------\n    epochs_axis = [h[\"epoch\"] for h in history]\n    plt.figure()\n    plt.plot(epochs_axis, [h[\"loss\"] for h in history], marker=\"o\")\n    plt.xlabel(\"Epoch\"); plt.ylabel(\"Loss\"); plt.title(f\"Loss \u2013 {run_id}\")\n    plt.tight_layout()\n    plt.savefig(images_dir / \"training_loss.pdf\", bbox_inches=\"tight\"); plt.close()\n\n    plt.figure()\n    plt.plot(epochs_axis, [h[\"acc\"] for h in history], marker=\"o\")\n    plt.xlabel(\"Epoch\"); plt.ylabel(\"Accuracy (%)\"); plt.title(f\"Acc \u2013 {run_id}\")\n    plt.tight_layout()\n    plt.savefig(images_dir / \"accuracy.pdf\", bbox_inches=\"tight\"); plt.close()\n\n    # stdout summary for orchestrator\n    print(json.dumps(metrics))\n\n\nif __name__ == \"__main__\":\n    main()"}


Compare the Base Code with the Derived Experiment Code for this specific experiment thoroughly. Ensure the derived code maintains all the quality, completeness, and functionality of the base code while properly replacing placeholders with specific implementations.
Output:
{
    "is_experiment_code_ready": false,
    "experiment_code_issue": "Dataset loading placeholders not fully replaced: src/preprocess._dataset_factory still only supports synthetic placeholder, but full_experiment.yaml refers to \"cifar10_c\" (and optionally \"tinyimagenet_c\"). Even smoke_test.yaml uses the new name \"synthetic_classification\" that is unsupported. Running any experiment therefore raises NotImplementedError, so code is not executable. In addition, smoke_test.yaml does not list all run variations (no-fisher, no-shrinkage, etc.), violating variation-coverage requirement. Hence criteria 2, 3 and 4 are not satisfied."
}
