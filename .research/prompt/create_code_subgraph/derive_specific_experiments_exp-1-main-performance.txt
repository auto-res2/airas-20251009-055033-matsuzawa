
Input:
You are a cutting-edge AI researcher generating complete, executable code for research paper experiments.

**Previous Step (Completed)**: Common base logic and evaluation framework have been generated with placeholders
**Current Task**: Generate production-ready code by completing all placeholders with actual implementations.

Your task is to take the common base foundation code and derive specific experimental variations by replacing ALL placeholders with complete, working implementations of datasets, models, and configurations specified in the experimental design. The resulting code must be immediately executable without any further modifications.

# Instructions: Experiment Specialization

## Core Task
- CONFIGURE ALL EXPERIMENTS: The primary task is to populate YAML file with a complete list of configurations for all run variations (baseline, proposed, ablations).
- REPLACE ALL PLACEHOLDERS: Replace all placeholders in the common base code with actual, complete implementations. No TODO, PLACEHOLDER, pass, or ... are allowed.
- IMPLEMENT MODELS FROM SCRATCH: YOU must implement all model architectures corresponding to the variations defined in the YAML file within `src/model.py`. Do NOT leave comments like "inject actual model here" or "use pretrained model".
- COMPLETE DATA PIPELINE: Implement the specific data loading and preprocessing logic in `src/preprocess.py`.
- PRODUCTION READY: The generated code must be immediately executable for research paper experiments without any further modifications. No external model files or additional implementation steps should be required.

## Specialization Requirements
- Complete `config/full_experiment.yaml`: This file is the driver of the entire experiment. Define each run variation (['source-frozen', 'bn-adapt', 'TENT', 'NGFAT', 'ZORRO-full']) as a separate item in the `runs` list, specifying its unique id, model name, and parameters.
- Complete `config/smoke_test.yaml`: Define lightweight versions of ALL run variations from full_experiment.yaml with reduced epochs/data to quickly validate pipeline integrity.
- Implement all required model architectures in `src/model.py`. The model names in the YAML must correspond to the model registry.
- Replace dataset placeholders with actual Hugging Face dataset loading and preprocessing
- Replace model placeholders with specific model architectures for each variation
- Ensure all external resources specified in the experimental design are properly integrated

## Complete Output Policy
- If a script/file has ANY changes: Output the COMPLETE, FULL script/file content
- If a script/file has NO changes needed: Output `[UNCHANGED]` placeholder only
- NEVER truncate or abbreviate changed content


# Experimental Environment
NVIDIA A100×8
VRAM：80GB×8
RAM：2048 GB

# Current Research Method
{
    "Open Problems": "1. Existing forward-only TTA (NGFAT) still updates only BN γ,β and therefore cannot adapt models that use Group/Layer/Instance Norm or no normalisation at all (e.g. transformers, self-normalising nets).\n2. Forward-only natural-gradient steps are always executed although many test batches are easy – unnecessary parameter noise slows convergence and may accumulate drift in recurring scenarios.\n3. There is no mechanism to detect harmful updates on-device; collapsing on rare, high-entropy inputs remains possible and cannot be rolled back without labelled data.\n4. Current Fisher blocks ignore cross-sample curvature; mini-batches <8 (typical on MCU) give noisy statistics.",
    "Methods": "Method name: ZORRO – Zero-backward Online Risk-aware RObust adaptation.\nKey novelties:\na) Universal forward-Fisher: derive closed-form 2×2 (or 1×1) natural-gradient for *any* affine layer that is a linear map followed by element-wise normalisation f(x)=α(x−μ)/σ+β. This covers BN, GN, LN, IN and the RMS norm of ViT. Statistics (μ,σ) are read from the same forward pass; memory overhead 2×feature-dim.\n\nb) Cross-batch shrinkage: maintain a running Fisher F̂_t and apply James–Stein shrinkage with factor τ_t= n/(n+λ) where n is effective sample count; this drastically reduces noise for tiny batches (n≤4) without extra FLOPs.\n\nc) Accuracy-estimation gate: integrate AETTA-mini (dropout-free variant using Monte-Carlo weight masking) to obtain a label-free error estimate ĥ_t after each batch. Update is *committed* only if ĥ_t − ĥ_{t−1}>ϵ or entropy drop >δ; otherwise parameters are left unchanged (pure inference). This halves update frequency on slow streams and prevents drift.\n\nd) Rollback buffer: store last K=3 accepted parameter states + their ĥ. If two consecutive batches yield worse ĥ than all K checkpoints, revert to best state (cost O(K·P) copy, P tiny because we save only γ,β,α). Fully unsupervised.\n\ne) µC-friendly maths: all matrix inverses are 2×2; no sqrt/exp outside LUT; fits in CMSIS-NN.\n",
    "Experimental Setup": "Datasets & streams:\n• TinyImageNet-C (severity 3-5) with η_r∈{1,1/2,1/8}.\n• CIFAR-10-C and CIFAR-10.1 natural shift.\n• Google Speech Commands v2 with background noise (audio, shows non-vision generality).\n• Real on-device capture: 5-fps webcam stream on STM32H7 (640 KB SRAM).\n\nModels: ResNet-20-GN, MobileNet-V2-GN, ViT-Tiny with RMS Norm, and a 1-D CNN for speech.\n\nBaselines: Source, TENT, FATENT, NGFAT, RoTTA, AETTA-reset, BN adaptive.\n\nMetrics:\n1. Error after {1,2,4} batches.\n2. Area-under-error-curve under Realistic Online Protocol (ROP, η_r).\n3. Avg. wall-clock latency & energy (Arm-Cortex-M vs Jetson-Nano).\n4. False-update rate (updates skipped although target batch lowered error <0.1 %).\n5. Collapse-recovery success (% runs where rollback prevents >5 % error spike).\n",
    "Experimental Code": "# zorro.py  (core update-gate, 60 LOC)\n@torch.no_grad()\ndef zorro_step(model, batch, state):\n    out = model(batch)\n    H = entropy(out)\n    ## 1. Unsup. accuracy proxy via softmax disagreement\n    q = out.softmax(1)\n    p = (q * (1-q)).sum(1)             # variance proxy\n    acc_hat = 1 - p.mean()\n    ## 2. Decide whether to adapt\n    if (acc_hat < state.last_acc-1e-3) or (H.mean()>state.last_H*0.9):\n        for mod in state.affine:       # BN, GN, LN, RMSNorm\n            y = mod.output             # cached activation\n            g = state.dH_dz @ y.mean(0)  # ∂H/∂α like NGFAT\n            F = y.var(0)+1e-5\n            tau = state.n/(state.n+state.lambda_)\n            step = -tau * g / F\n            mod.weight += step\n        state.save_checkpoint(acc_hat)\n    state.update_stats(acc_hat, H)\n    return out",
    "Expected Result": "• Matches NGFAT accuracy on CIFAR-C but with 35 % fewer parameter updates.\n• On GN/LN models where BN-only methods fail, ZORRO reduces error from 38 % (source) to 24 % within 2 batches, beating TENT-GN (27 %).\n• MCU demo: 5 fps stream maintained at 3.7 mJ/frame vs 6.2 mJ for TENT.\n• Rollback prevents >90 % of catastrophic error spikes observed in NGFAT under recurring shift.\n• Audio CNN: word error 8.1 %→6.4 % after first noisy batch, showing modality-agnosticism.",
    "Expected Conclusion": "ZORRO generalises forward-only natural-gradient TTA to any normalisation layer, autonomously decides *when* to adapt via built-in label-free risk estimates, and adds a lightweight rollback against collapse. It retains single-pass speed, extends applicability to transformers and micro-controllers, and raises the bar for robust, energy-aware test-time learning in real-world streams."
}

# Experimental Design
- Strategy: Overall experimental strategy for demonstrating the effectiveness of ZORRO

1. Core validation axes
   a. Adaptation benefit – Does ZORRO lower on-line error faster and further than all competitors?
   b. Efficiency – Does it achieve that benefit with fewer parameter updates, lower latency, and lower energy?
   c. Robustness – Does it remain stable under severe or recurring shifts and avoid catastrophic drift?
   d. Generality – Does it work across normalisation types, model families, modalities, batch sizes, and hardware classes?
   e. Safety – Can the gate + rollback reject harmful updates better than prior art?

2. Comparative framework
   • Methods: (i) frozen source model, (ii) classic BN adaptation, (iii) forward-only SOTA (TENT, NGFAT, FATENT), (iv) risk-aware SOTA (RoTTA, AETTA-reset), (v) ZORRO ablations (−Fisher, −shrinkage, −gate, −rollback, −all) and full ZORRO.
   • Datasets/shifts: vision, audio, synthetic recurrences, real device streams. Each experiment will use an identical set of comparison methods so curves are directly overlayable.
   • Hardware profiles: A100 (heavy), Jetson-Nano (edge GPU), STM32H7 (MCU) – same software harness, differing batch-size budgets.

3. Multi-angle evidence collection
   • Quantitative accuracy: instantaneous error at fixed adaptation horizons {1,2,4,∞} batches; area-under-error-curve (AUEC) over the whole stream; Wilcoxon signed-rank test over 5 seeds.
   • Adaptation cost: (i) number of parameter update steps, (ii) wall-clock latency per frame, (iii) mean energy per frame (on-board power logger for Jetson / MCU).
   • Stability metrics: variance of error, maximum error spike, collapse rate, rollback recovery rate, false-update rate.
   • Qualitative analysis: histogram of gate decisions, t-SNE of feature drift, visual audio/vision examples where ZORRO reverted.
   • Computational analysis: FLOPs, memory, additional parameters; measured with Torch-Profiler and MCU on-device counters.

4. Experimental phases (common skeleton for every task)
   Phase-0: Baseline replication to calibrate code, fix seeds, and verify that results reproduce published numbers on clean data.
   Phase-1: Standard corruptions – run single-pass streams under ROP; log all core metrics.
   Phase-2: Recurring/easy-hard cycles – stress test the gate/rollback; identical shift schedule for all methods.
   Phase-3: Tiny-batch regime – constrain batch ≤4 to expose Fisher shrinkage; repeat Phase-1 metrics.
   Phase-4: Hardware deployment – run frozen inference & on-line adaptation in real-time on Jetson/MCU; capture energy & fps.
   Phase-5: Ablation sweep – repeat Phases 1–3 with each component disabled to pinpoint contribution.
   Phase-6: Cross-modality – apply to Speech Commands; same phases 1–3.

5. Success criteria (must hold in ≥4/5 seeds)
   • AUEC improvement ≥10% over best non-ZORRO competitor on every dataset-model pair.
   • Parameter-update count ≤70% of NGFAT average while maintaining equal or better final error.
   • Catastrophic collapse rate <1%; rollback recovers ≥80% of induced collapses.
   • Latency overhead ≤5% vs source inference on A100; energy per frame ≤65% of TENT on MCU.
   • No ablation variant may outperform full ZORRO on more than 10% of runs.

6. Statistical protocol
   • 5 random seeds × 5 shuffled test streams per condition.
   • Report median and 95% CI; conduct paired Wilcoxon tests with Holm-Bonferroni correction.
   • Release code, logs, and weights for full transparency.

7. Resource allocation
   • Distributed runner uses 6 A100 GPUs for parallel seeds, leaving 2 GPUs for hyper-parameter sweeps.
   • RAM headroom (2 TB) holds all datasets and checkpoints in a RAM-disk, eliminating I/O variance.
   • Edge hardware tests run nightly; results auto-synced to central dashboard.

This unified strategy ensures every experiment, regardless of dataset or model, produces directly comparable evidence on adaptation benefit, cost, robustness, generality, and safety, thereby establishing a comprehensive case for ZORRO’s effectiveness.

# Current Experiment (to generate code for)
- Experiment ID: exp-1-main-performance
- Description: Objective / hypothesis: Quantitatively verify that the proposed ZORRO method reduces online error faster and further than all strong forward-only TTA baselines on standard vision corruption benchmarks while using fewer updates and comparable compute.

Models
• ResNet-20-GN  (CIFAR sized)
• MobileNet-V2-GN  (mobile vision)
• ViT-Tiny-RMS  (transformer, no BN)

Datasets
• CIFAR-10-C  (15 corruption types × 5 severities)
• CIFAR-10.1  (natural covariate shift)
• TinyImageNet-C  (severity 3-5)

Dataset preprocessing
• Images resized to native resolution, per-dataset mean/σ normalisation.
• No data augmentation during test-time streams.

Data splitting / streaming protocol
• Training: official training split only, no corruptions.
• Validation: clean val split for early-stopping hyper-parameters (λ, ε, δ).
• Test: Realistic Online Protocol (ROP) streams of length 10 k drawn from test-corruption pairs; η_r ∈ {1, 1/2, 1/8} controls arrival rate.
• 5 independent shuffles × 5 random seeds = 25 runs per variation.

Evaluation metrics
Primary: (i) error after {1,2,4} batches, (ii) Area-Under-Error-Curve (AUEC).
Secondary: parameter-update count, wall-clock latency per frame (A100), memory Δ, energy/frame (collected with NVIDIA-SMI power log).
Statistical test: paired Wilcoxon signed-rank with Holm–Bonferroni (α=0.05).

Comparisons
• Baselines: frozen source, BN adaptation, TENT, NGFAT (official code, † tuned learning-rate), all run with identical batch sizes.
• Proposed: ZORRO-full.
† NGFAT uses author-reported η=0.001 for fair comparability.

Hyper-parameter analysis
• Grid over learning-rate η ∈ {5e-4,1e-3,2e-3} (baselines) vs analytic NG for ZORRO.
• Gate threshold ε ∈ {5e-3,1e-2}; shrinkage λ ∈ {4,8,16} tuned on validation streams.

Robustness tests
• Repeat full experiment with batch-size ≤4 (tiny-batch regime).
• 10% additive Gaussian noise injected into activations to test stability.

Compute / efficiency measurement
• FLOPs via fvcore-flop-counter.
• Torch profiler for time; nvidia-smi for power; report mean±95% CI.

Repetitions & checkpointing
• 5 seeds; metrics averaged, medians reported.
• Early-stopping for hyper-param search by best validation AUEC, otherwise last checkpoint.

Example code (fragment)
```
stream = CorruptionStream(dataset, bs=batch)
for batch in stream:
    logits = model(batch.to(device))
    if variant == 'ZORRO-full':
         zorro_step(model, batch, state)
    elif variant == 'NGFAT':
         ngfat_step(model, batch)
    ...  # other variants
    meter.update(logits, labels=None)  # label-free metrics internally
```
Expected outcome: ZORRO produces ≥15% lower AUEC than the best competitor on every model–dataset pair while issuing ≤65% of NGFAT’s parameter updates and adding ≤5% latency on A100.
- Run Variations: ['source-frozen', 'bn-adapt', 'TENT', 'NGFAT', 'ZORRO-full']

# Base Code
{'train_py': '#!/usr/bin/env python\n"""\nTraining / adaptation runner for a SINGLE experiment variation.  \nThis file *must not* be called directly by users – it is launched as a\nsub-process by src.main so that logs can be tee’ed and captured per run.  \nNevertheless, it can be invoked stand-alone for debugging:\n\n    python -m src.train --config-path path/to/run_cfg.yaml --results-dir /tmp/res\n"""\nfrom __future__ import annotations\n\nimport argparse\nimport copy\nimport json\nimport os\nimport time\nfrom collections import deque\nfrom pathlib import Path\nfrom typing import Dict, List, Tuple\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport yaml\nfrom torch import optim\nfrom tqdm import tqdm\n\nfrom .preprocess import get_dataloaders, set_seed\nfrom .model import build_model\n\nmatplotlib.use("Agg")  # mandatory for CLI / CI environments\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument("--config-path", type=str, required=True,\n                   help="YAML file describing *one* experiment run (written by main.py)")\n    p.add_argument("--results-dir", type=str, required=True,\n                   help="Directory where all outputs of this run are saved")\n    return p.parse_args()\n\n\n################################################################################\n# ------------------------------  ZORRO ADAPTER  ------------------------------ #\n################################################################################\n\nclass ZorroState:\n    """Holds adaptation statistics, checkpoints & hyper-params."""\n\n    def __init__(self, model: nn.Module, lambda_: float = 1.0,\n                 eps: float = 1e-3, k_ckpt: int = 3):\n        self.lambda_ = lambda_\n        self.eps = eps\n        self.n = 0  # effective sample count for shrinkage\n        self.last_acc_hat = 1.0  # optimistic starting point\n        self.last_entropy = 0.0\n        self.checkpoints: deque = deque(maxlen=k_ckpt)\n\n        self.affine: List[nn.Module] = []\n        self.activation_cache: Dict[int, torch.Tensor] = {}\n        self._register_hooks(model)\n\n    # ---------------------------------------------------------------------\n    def _register_hooks(self, model: nn.Module):\n        """Register forward hooks on affine normalisation layers to cache outputs."""\n        for m in model.modules():\n            if isinstance(m, (nn.BatchNorm2d, nn.BatchNorm1d,\n                              nn.GroupNorm, nn.LayerNorm)):\n                self.affine.append(m)\n                m.register_forward_hook(self._make_hook(m))\n\n    def _make_hook(self, module):\n        def _hook(_, __, output):\n            # Detach to avoid autograd bookkeeping – adaptation is forward-only.\n            self.activation_cache[id(module)] = output.detach()\n        return _hook\n\n    # ---------------------------------------------------------------------\n    @torch.no_grad()\n    def zorro_step(self, logits: torch.Tensor):\n        """Perform *one* ZORRO adaptation step given the model logits."""\n        probs = torch.softmax(logits, dim=1)\n        log_probs = torch.log_softmax(logits, dim=1)\n        entropy = -(probs * log_probs).sum(1)           # per-sample entropy\n        var_proxy = (probs * (1 - probs)).sum(1)        # as in original paper\n        acc_hat = 1.0 - var_proxy.mean()               # label-free accuracy proxy\n\n        # ---------------- decision gate ---------------- #\n        should_update = (\n            (acc_hat < self.last_acc_hat - self.eps) or\n            (entropy.mean() > self.last_entropy * 0.9)\n        )\n\n        tau = self.n / (self.n + self.lambda_) if (self.n + self.lambda_) > 0 else 0.0\n\n        if should_update:\n            for mod in self.affine:\n                y = self.activation_cache[id(mod)]      # activation from last forward\n                if y.ndim > 2:                          # e.g. Conv feature-maps\n                    g = y.mean(dim=(0, 2, 3))          # gradient proxy ∂H/∂α\n                    F_diag = y.var(dim=(0, 2, 3)) + 1e-5\n                else:                                   # e.g. LayerNorm over features\n                    g = y.mean(dim=0)\n                    F_diag = y.var(dim=0) + 1e-5\n                step = -tau * g / F_diag\n                step = step.view_as(mod.weight.data)\n                mod.weight.data.add_(step)\n            # ---------------- checkpointing ---------------- #\n            self.checkpoints.append((self._snapshot(), acc_hat.item()))\n        else:\n            # If two consecutive bad batches ⇒ rollback to best ckpt.\n            if len(self.checkpoints) == self.checkpoints.maxlen and \\\n               acc_hat.item() > max(a for _, a in self.checkpoints):\n                best_state, _ = max(self.checkpoints, key=lambda x: x[1])\n                self._restore(best_state)\n\n        # Update running statistics\n        self.last_acc_hat = acc_hat.item()\n        self.last_entropy = entropy.mean().item()\n        self.n += 1\n\n    # ------------------------------------------------------------------ utils #\n    def _snapshot(self):\n        """Return *only* the affine parameters weight/bias for lightweight ckpt."""\n        return {\n            id(m): {\n                "weight": m.weight.data.clone(),\n                "bias": None if m.bias is None else m.bias.data.clone(),\n            } for m in self.affine\n        }\n\n    def _restore(self, state_dict):\n        for m in self.affine:\n            buf = state_dict[id(m)]\n            m.weight.data.copy_(buf["weight"])\n            if m.bias is not None and buf["bias"] is not None:\n                m.bias.data.copy_(buf["bias"])\n\n################################################################################\n# ------------------------------  MAIN TRAINING  ----------------------------- #\n################################################################################\n\ndef main():\n    args = parse_args()\n    cfg = yaml.safe_load(Path(args.config_path).read_text())\n    run_id = cfg["run_id"]\n\n    results_root = Path(args.results_dir).expanduser()\n    results_root.mkdir(parents=True, exist_ok=True)\n    images_dir = results_root / "images"\n    images_dir.mkdir(exist_ok=True, parents=True)\n\n    set_seed(cfg.get("seed", 42))\n    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")\n\n    # ---------------------------------------------------------------- dataset #\n    train_loader, val_loader, num_classes = get_dataloaders(cfg["dataset"],\n                                                           cfg["training"])\n\n    # --------------------------------------------------------------   model #\n    model_cfg = cfg["model"]\n    model_cfg["num_classes"] = num_classes  # ensure consistency\n    model = build_model(model_cfg).to(device)\n\n    # Optionally load a pre-trained source checkpoint\n    if "pretrained" in model_cfg and model_cfg["pretrained"]:\n        model.load_state_dict(torch.load(model_cfg["pretrained"], map_location=device))\n\n    # -------------------------------------------------------------  optimiser #\n    optim_cfg = cfg["training"]\n    optimiser = optim.Adam(model.parameters(), lr=optim_cfg.get("learning_rate", 1e-3))\n    criterion = nn.CrossEntropyLoss()\n\n    method = optim_cfg.get("method", "source").lower()\n    use_zorro = method == "zorro"\n    z_state = ZorroState(model) if use_zorro else None\n\n    epochs = optim_cfg.get("epochs", 1)\n    history: List[Dict[str, float]] = []\n\n    for epoch in range(1, epochs + 1):\n        model.train(not use_zorro)  # keep BN stats frozen for adaptation\n        epoch_loss = 0.0\n        correct, total = 0, 0\n        pbar = tqdm(train_loader, desc=f"[{run_id}] Epoch {epoch}/{epochs}")\n        for batch in pbar:\n            inputs, targets = (b.to(device) for b in batch)\n\n            if use_zorro:\n                # ---------------- inference + forward NG update ---------------- #\n                with torch.no_grad():\n                    logits = model(inputs)\n                    z_state.zorro_step(logits)\n                loss = criterion(logits, targets)\n            else:\n                optimiser.zero_grad()\n                logits = model(inputs)\n                loss = criterion(logits, targets)\n                loss.backward()\n                optimiser.step()\n\n            # ---------------- stats ---------------- #\n            epoch_loss += loss.item() * inputs.size(0)\n            _, preds = logits.max(1)\n            correct += preds.eq(targets).sum().item()\n            total += inputs.size(0)\n            pbar.set_postfix({"loss": loss.item(),\n                              "acc": 100.0 * correct / total})\n\n        epoch_loss /= total\n        epoch_acc = 100.0 * correct / total\n        history.append({"epoch": epoch, "loss": epoch_loss, "acc": epoch_acc})\n\n    # ----------------------------------------------------------------- eval #\n    model.eval()\n    val_correct, val_total, val_loss = 0, 0, 0.0\n    with torch.no_grad():\n        for inputs, targets in val_loader:\n            inputs, targets = inputs.to(device), targets.to(device)\n            logits = model(inputs)\n            loss = criterion(logits, targets)\n            val_loss += loss.item() * inputs.size(0)\n            _, preds = logits.max(1)\n            val_correct += preds.eq(targets).sum().item()\n            val_total += inputs.size(0)\n    val_loss /= val_total\n    val_acc = 100.0 * val_correct / val_total\n\n    ############################################################################\n    # ---------------------------  SAVE ARTIFACTS  --------------------------- #\n    ############################################################################\n    ckpt_path = results_root / "model.pt"\n    torch.save(model.state_dict(), ckpt_path)\n\n    # ------------------------ metrics JSON ------------------------ #\n    metrics = {\n        "run_id": run_id,\n        "method": method,\n        "epochs": epochs,\n        "train_history": history,\n        "val_loss": val_loss,\n        "val_acc": val_acc,\n    }\n    (results_root / "results.json").write_text(json.dumps(metrics, indent=2))\n\n    # ---------------------------  FIGURES  ------------------------- #\n    epochs_axis = [h["epoch"] for h in history]\n    train_loss_axis = [h["loss"] for h in history]\n    train_acc_axis = [h["acc"] for h in history]\n\n    # line – loss\n    plt.figure()\n    plt.plot(epochs_axis, train_loss_axis, marker="o", label="train_loss")\n    plt.xlabel("Epoch")\n    plt.ylabel("Cross-entropy loss")\n    plt.title(f"Training loss – {run_id}")\n    plt.legend()\n    plt.annotate(f"{train_loss_axis[-1]:.3f}",\n                 (epochs_axis[-1], train_loss_axis[-1]),\n                 textcoords="offset points", xytext=(0, 5), ha=\'center\')\n    plt.tight_layout()\n    plt.savefig(images_dir / "training_loss.pdf", bbox_inches="tight")\n    plt.close()\n\n    # line – accuracy\n    plt.figure()\n    plt.plot(epochs_axis, train_acc_axis, marker="o", label="train_acc")\n    plt.xlabel("Epoch")\n    plt.ylabel("Accuracy (%)")\n    plt.title(f"Training accuracy – {run_id}")\n    plt.legend()\n    plt.annotate(f"{train_acc_axis[-1]:.2f}%", (epochs_axis[-1], train_acc_axis[-1]),\n                 textcoords="offset points", xytext=(0, 5), ha=\'center\')\n    plt.tight_layout()\n    plt.savefig(images_dir / "accuracy.pdf", bbox_inches="tight")\n    plt.close()\n\n    # -------------------- stdout summary (required) -------------------- #\n    print(json.dumps(metrics))\n\n\nif __name__ == "__main__":\n    main()', 'evaluate_py': '#!/usr/bin/env python\n"""Aggregate results across run variations, compute comparison metrics &\npublication-ready figures.  This script is triggered *once* by src.main after\nall individual experiment runs are finished."""\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\nmatplotlib.use("Agg")\n\nFIG_TOPICS = [\n    ("training_loss", "Cross-entropy loss"),\n    ("accuracy", "Accuracy (%)"),\n    ("final_accuracy_bar", "Final validation accuracy")\n]\n\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument("--results-dir", type=str, required=True,\n                   help="Root directory containing sub-dirs for each run")\n    return p.parse_args()\n\n\ndef collect_results(results_dir: Path) -> pd.DataFrame:\n    records: List[Dict] = []\n    for sub in results_dir.iterdir():\n        if not sub.is_dir():\n            continue\n        res_file = sub / "results.json"\n        if res_file.exists():\n            rec = json.loads(res_file.read_text())\n            records.append(rec)\n    if not records:\n        raise RuntimeError(f"No results.json files found in {results_dir}")\n    return pd.DataFrame.from_records(records)\n\n\ndef plot_comparisons(df: pd.DataFrame, results_dir: Path):\n    images = results_dir / "images"\n    images.mkdir(exist_ok=True, parents=True)\n\n    # 1) Line curves – loss & acc\n    for metric_key, ylabel in [("loss", "Cross-entropy loss"),\n                               ("acc", "Accuracy (%)")]:\n        plt.figure()\n        for _, row in df.iterrows():\n            y = [h[metric_key] for h in row["train_history"]]\n            x = [h["epoch"] for h in row["train_history"]]\n            plt.plot(x, y, marker="o", label=row["run_id"])\n            plt.annotate(f"{y[-1]:.2f}" if metric_key == "acc" else f"{y[-1]:.3f}",\n                         (x[-1], y[-1]), textcoords="offset points",\n                         xytext=(0, 5), ha=\'center\')\n        plt.xlabel("Epoch")\n        plt.ylabel(ylabel)\n        plt.legend()\n        plt.title(ylabel + " comparison")\n        plt.tight_layout()\n        fname = "training_loss.pdf" if metric_key == "loss" else "accuracy.pdf"\n        plt.savefig(images / fname, bbox_inches="tight")\n        plt.close()\n\n    # 2) Bar – final validation accuracy\n    plt.figure()\n    sns.barplot(x="run_id", y="val_acc", data=df)\n    for idx, row in df.iterrows():\n        plt.text(idx, row["val_acc"] + 0.2, f"{row[\'val_acc\']:.2f}%", ha=\'center\')\n    plt.ylabel("Validation accuracy (%)")\n    plt.xlabel("Run")\n    plt.title("Final validation accuracy across runs")\n    plt.tight_layout()\n    plt.savefig(images / "final_accuracy_bar.pdf", bbox_inches="tight")\n    plt.close()\n\n\ndef main():\n    args = parse_args()\n    results_dir = Path(args.results_dir).expanduser()\n\n    df = collect_results(results_dir)\n    plot_comparisons(df, results_dir)\n\n    # Output comparison results in JSON (stdout)\n    comp = df[["run_id", "val_acc", "val_loss" if "val_loss" in df.columns else None]].to_dict(\n        orient="records")\n    print(json.dumps({"comparison": comp}))\n\n\nif __name__ == "__main__":\n    main()', 'preprocess_py': '"""Common data pipeline with dataset placeholders.\nThe *core* logic (splitting, DataLoader creation, seeding) is fully\nimplemented. Dataset-specific loading is isolated behind clear placeholders so\nthat future steps can swap-in real datasets without touching any other code."""\nfrom __future__ import annotations\n\nimport random\nfrom pathlib import Path\nfrom typing import Tuple\n\nimport numpy as np\nimport torch\nfrom torch.utils.data import DataLoader, TensorDataset, random_split\n\n__all__ = ["get_dataloaders", "set_seed"]\n\n\n# ------------------------------------------------------------------ utils --- #\n\ndef set_seed(seed: int):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n\n\n# ------------------------------------------------------------ core pipeline #\n\ndef _load_placeholder_dataset(cfg: dict) -> Tuple[torch.utils.data.Dataset, int]:\n    """Generate a *synthetic* classification dataset. Useful for smoke tests and\n    retaining end-to-end functionality before real datasets are injected."""\n    num_samples: int = cfg.get("num_samples", 1024)\n    num_classes: int = cfg.get("num_classes", 10)\n    input_shape = cfg.get("input_shape", [3, 32, 32])\n\n    data = torch.randn(num_samples, *input_shape)\n    targets = torch.randint(0, num_classes, (num_samples,))\n    return TensorDataset(data, targets), num_classes\n\n\ndef _dataset_factory(cfg: dict):\n    name = cfg["name"]\n    if name == "SYNTHETIC_CLASSIFICATION_PLACEHOLDER":\n        return _load_placeholder_dataset(cfg)\n    # ---------------------------------------------------------------------- #\n    # PLACEHOLDER: Will be replaced with specific dataset loading logic.     #\n    # Insert custom dataset returns (dataset, num_classes) below this line.  #\n    # ---------------------------------------------------------------------- #\n    raise NotImplementedError(f"Dataset \'{name}\' is not implemented yet. ")\n\n\ndef get_dataloaders(dataset_cfg: dict, training_cfg: dict):\n    """Return (train_loader, val_loader, num_classes)."""\n    dataset, num_classes = _dataset_factory(dataset_cfg)\n\n    # ------------------------- split into train / val -------------------- #\n    val_fraction = training_cfg.get("val_fraction", 0.2)\n    val_size = int(len(dataset) * val_fraction)\n    train_size = len(dataset) - val_size\n    train_set, val_set = random_split(dataset, [train_size, val_size])\n\n    batch_size = training_cfg.get("batch_size", 32)\n    num_workers = training_cfg.get("num_workers", 0)\n\n    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True,\n                              num_workers=num_workers, pin_memory=True)\n    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False,\n                            num_workers=num_workers, pin_memory=True)\n\n    return train_loader, val_loader, num_classes', 'model_py': '"""Model architectures & factory.\nOnly *core* logic is provided here. Dataset / modality specific models (e.g.\nResNet-20-GN, MobileNet-V2-GN, ViT-Tiny) will be injected later via the\nplaceholder mechanism."""\nfrom __future__ import annotations\n\nfrom typing import Dict\n\nimport torch\nimport torch.nn as nn\n\n__all__ = ["build_model"]\n\n\n# ------------------------------------------------------------------ helpers #\n\ndef _make_norm(norm_type: str, num_features: int):\n    if norm_type == "batch":\n        return nn.BatchNorm2d(num_features, affine=True)\n    if norm_type == "group":\n        return nn.GroupNorm(num_groups=4, num_channels=num_features, affine=True)\n    if norm_type == "layer":\n        return nn.GroupNorm(num_groups=1, num_channels=num_features, affine=True)\n    raise ValueError(f"Unsupported norm type: {norm_type}")\n\n\n# --------------------------------------------------------------  SIMPLE CNN #\nclass SimpleCNN(nn.Module):\n    """Light-weight CNN with GroupNorm. Suitable for smoke tests and synthetic\n    datasets. Real research models will be plugged-in later."""\n\n    def __init__(self, in_channels: int = 3, num_classes: int = 10,\n                 norm: str = "group"):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(in_channels, 32, 3, padding=1),\n            _make_norm(norm, 32),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(32, 64, 3, padding=1),\n            _make_norm(norm, 64),\n            nn.ReLU(inplace=True),\n            nn.AdaptiveAvgPool2d((1, 1)),\n        )\n        self.classifier = nn.Linear(64, num_classes)\n\n    def forward(self, x):\n        x = self.features(x)\n        x = torch.flatten(x, 1)\n        return self.classifier(x)\n\n\n# ------------------------------------------------------------------ factory #\n\ndef build_model(model_cfg: Dict):\n    name = model_cfg.get("name", "simple_cnn").lower()\n\n    if name in {"simple_cnn", "simple_cnn_placeholder"}:\n        return SimpleCNN(num_classes=model_cfg.get("num_classes", 10))\n\n    # ------------------------------------------------------------------ #\n    # PLACEHOLDER: Additional models (ResNet-20-GN, ViT-Tiny, etc.) will be\n    # registered here in subsequent experiment-specific steps.            #\n    # ------------------------------------------------------------------ #\n    raise NotImplementedError(f"Model \'{name}\' not yet implemented.")', 'main_py': '#!/usr/bin/env python\n"""Main orchestrator script.\n\nUsage examples:\n\n(1) Smoke test – lightweight synthetic run to verify that *all* variations\n    execute without GPU OOM etc.\n\n    uv run python -m src.main --smoke-test --results-dir /tmp/zorro_results\n\n(2) Full experiment – reads all variations from config/full_experiment.yaml\n\n    uv run python -m src.main --full-experiment --results-dir /path/to/res\n"""\nfrom __future__ import annotations\n\nimport argparse\nimport shutil\nimport subprocess\nimport sys\nimport threading\nfrom pathlib import Path\nfrom typing import List\n\nimport yaml\n\nCONFIG_DIR = Path(__file__).resolve().parent.parent / "config"\n\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    g = p.add_mutually_exclusive_group(required=True)\n    g.add_argument("--smoke-test", action="store_true")\n    g.add_argument("--full-experiment", action="store_true")\n    p.add_argument("--results-dir", type=str, required=True,\n                   help="Directory to store *all* outputs (logs, figs, metrics)")\n    return p.parse_args()\n\n\n# ------------------------------------------------------------------- helpers #\n\ndef _tee(stream, tee_to_file):\n    """Read `stream` byte-by-byte, write both to sys.<out/err> and file."""\n    for line in iter(stream.readline, b""):\n        decoded = line.decode()\n        tee_to_file.write(decoded)\n        tee_to_file.flush()\n        sys.stdout.write(decoded) if tee_to_file.name.endswith("stdout.log") else sys.stderr.write(decoded)\n    stream.close()\n\n\ndef _launch_train(run_cfg: dict, results_root: Path, python_bin: str = sys.executable):\n    run_id = run_cfg["run_id"]\n    run_dir = results_root / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Write single-run YAML for the sub-process to consume\n    run_cfg_path = run_dir / "config.yaml"\n    run_cfg_path.write_text(yaml.safe_dump(run_cfg))\n\n    # Prepare log files\n    stdout_path = run_dir / "stdout.log"\n    stderr_path = run_dir / "stderr.log"\n    stdout_f = stdout_path.open("w")\n    stderr_f = stderr_path.open("w")\n\n    cmd = [python_bin, "-m", "src.train", "--config-path", str(run_cfg_path),\n           "--results-dir", str(run_dir)]\n\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    # Real-time tee of stdout / stderr\n    threads: List[threading.Thread] = []\n    threads.append(threading.Thread(target=_tee, args=(proc.stdout, stdout_f)))\n    threads.append(threading.Thread(target=_tee, args=(proc.stderr, stderr_f)))\n    for t in threads:\n        t.daemon = True\n        t.start()\n\n    proc.wait()\n    for t in threads:\n        t.join()\n    stdout_f.close()\n    stderr_f.close()\n\n    if proc.returncode != 0:\n        raise RuntimeError(f"Run {run_id} failed with exit code {proc.returncode}")\n\n\n# -------------------------------------------------------------------- main #\n\ndef main():\n    args = parse_args()\n    results_root = Path(args.results_dir).expanduser()\n    if results_root.exists():\n        shutil.rmtree(results_root)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    cfg_path = CONFIG_DIR / ("smoke_test.yaml" if args.smoke_test else "full_experiment.yaml")\n    config = yaml.safe_load(cfg_path.read_text())\n    experiments = config["experiments"]\n\n    for run_cfg in experiments:\n        _launch_train(run_cfg, results_root)\n\n    # After all runs -> aggregate\n    subprocess.run([sys.executable, "-m", "src.evaluate", "--results-dir", str(results_root)], check=True)\n\n\nif __name__ == "__main__":\n    main()', 'pyproject_toml': '[project]\nname = "zorro-experiments"\nversion = "0.1.0"\ndescription = "Common core foundation for ZORRO adaptation experiments"\nrequires-python = ">=3.9"\nauthors = [\n    { name = "Research Automation" }\n]\n\n[tool.poetry.dependencies]\npython = "^3.9"\ntorch = "^2.0"\ntorchvision = "^0.15"\nmatplotlib = "^3.7"\nseaborn = "^0.12"\npyyaml = "^6.0"\npandas = "^2.0"\nscikit-learn = "^1.2"\nrich = "^13.0"\ntqdm = "^4.0"\n\n[build-system]\nrequires = ["setuptools", "wheel"]\n', 'smoke_test_yaml': '# Lightweight configuration used by CI smoke tests.  \n# Uses synthetic data so that full pipeline can run under <30 sec.\n\nexperiments:\n  - run_id: smoke_source\n    seed: 123\n    dataset:\n      name: SYNTHETIC_CLASSIFICATION_PLACEHOLDER  # PLACEHOLDER: Will be replaced\n      num_samples: 512\n      num_classes: 10\n      input_shape: [3, 32, 32]\n    model:\n      name: SIMPLE_CNN_PLACEHOLDER               # PLACEHOLDER: Will be replaced\n    training:\n      epochs: 1\n      batch_size: 64\n      learning_rate: 0.001\n      method: source\n\n  - run_id: smoke_zorro\n    seed: 123\n    dataset:\n      name: SYNTHETIC_CLASSIFICATION_PLACEHOLDER  # PLACEHOLDER\n      num_samples: 512\n      num_classes: 10\n      input_shape: [3, 32, 32]\n    model:\n      name: SIMPLE_CNN_PLACEHOLDER               # PLACEHOLDER\n    training:\n      epochs: 1\n      batch_size: 64\n      learning_rate: 0.001\n      method: zorro', 'full_experiment_yaml': '# Template for the *full* experiment suite. Only placeholders are provided here.\n# The derive_specific step will populate this with concrete datasets, models and\n# hyper-parameters.\n\nexperiments:\n  # --------------------------------------------------------------------- #\n  # PLACEHOLDER: Add comprehensive run variations (baseline, proposed,     #\n  #              ablations, hardware-specific) here.                      #\n  #                                                                       #\n  # Example structure:                                                     #\n  # - run_id: tinyimagenet_resnet20_gn_source                              #\n  #   dataset:                                                             #\n  #     name: TINYIMAGENET_CORRUPT_C_PLACEHOLDER                           #\n  #   model:                                                               #\n  #     name: RESNET20_GN_PLACEHOLDER                                      #\n  #     pretrained: /path/to/source_ckpt.pt                                #\n  #   training:                                                            #\n  #     method: source                                                     #\n  #     batch_size: 32                                                     #\n  #     epochs: 0                                                          #\n  # --------------------------------------------------------------------- #\n  - run_id: FULL_EXPERIMENT_PLACEHOLDER\n    dataset: {DATASET_PLACEHOLDER}\n    model: {MODEL_PLACEHOLDER}\n    training: {SPECIFIC_CONFIG_PLACEHOLDER}\n'}

# External Resources (Use these to replace placeholders)

**HuggingFace Models (Replace MODEL_PLACEHOLDER with these):**


**HuggingFace Datasets (Replace DATASET_PLACEHOLDER with these):**

- ID: robro/cifar10-c-parquet

- Code: from datasets import load_dataset

# Load the dataset
dataset = load_dataset("robro/cifar10-c-parquet", split="train", trust_remote_code=False)
classes = ["airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]

# Access a sample from the dataset
example = dataset[0]
image = example["image"]
label = example["label"]

image.show()  # Display the image
print(f"Label: {classes[label]}")


- ID: randall-lab/cifar10-c

- Code: from datasets import load_dataset

# Load the dataset
dataset = load_dataset("randall-lab/cifar10-c", split="test", trust_remote_code=True)

# Access a sample from the dataset
example = dataset[0]
image = example["image"]
label = example["label"]

image.show()  # Display the image
print(f"Label: {label}")


- ID: XiangPan/CIFAR10.1


- ID: randall-lab/tiny-imagenet-c

- Code: from datasets import load_dataset

# Load the dataset
dataset = load_dataset("randall-lab/tiny-imagenet-c", split="test", trust_remote_code=True)

# Access a sample from the dataset
example = dataset[0]
image = example["image"]
label = example["label"]

image.show()  # Display the image
print(f"Label: {label}")





# Validation Feedback


**Previous Validation Failed**: 
Please address the validation issues and regenerate the affected files while keeping successful files unchanged using [UNCHANGED] markers.



Take the foundation code and create complete, specialized experiments using the External Resources specified above.
Output:
{
    "train_py": "#!/usr/bin/env python\n\"\"\"\nTraining / adaptation runner for a SINGLE experiment variation.  \nThis file *must not* be called directly by users – it is launched as a\nsub-process by src.main so that logs can be tee’ed and captured per run.  \nNevertheless, it can be invoked stand-alone for debugging:\n\n    python -m src.train --config-path path/to/run_cfg.yaml --results-dir /tmp/res\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport copy\nimport json\nimport os\nimport time\nfrom collections import deque\nfrom pathlib import Path\nfrom typing import Dict, List, Tuple\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport yaml\nfrom torch import optim\nfrom tqdm import tqdm\n\nfrom .preprocess import get_dataloaders, set_seed\nfrom .model import build_model\n\nmatplotlib.use(\"Agg\")  # mandatory for CLI / CI environments\n\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--config-path\", type=str, required=True,\n                   help=\"YAML file describing *one* experiment run (written by main.py)\")\n    p.add_argument(\"--results-dir\", type=str, required=True,\n                   help=\"Directory where all outputs of this run are saved\")\n    return p.parse_args()\n\n\n################################################################################\n# ------------------------------  ZORRO ADAPTER  ------------------------------ #\n################################################################################\n\nclass _AffineHookMixin:\n    \"\"\"Utility mix-in to collect activations from affine normalisation layers.\"\"\"\n\n    def __init__(self, model: nn.Module, selector):\n        self.affine: List[nn.Module] = []\n        self.activation_cache: Dict[int, torch.Tensor] = {}\n        for m in model.modules():\n            if selector(m):\n                self.affine.append(m)\n                m.register_forward_hook(self._make_hook(m))\n\n    def _make_hook(self, module):\n        def _hook(_, __, output):\n            self.activation_cache[id(module)] = output.detach()\n        return _hook\n\n\nclass ZorroState(_AffineHookMixin):\n    \"\"\"Holds adaptation statistics, checkpoints & hyper-params for ZORRO.\"\"\"\n\n    def __init__(self, model: nn.Module, lambda_: float = 8.0,\n                 eps: float = 5e-3, k_ckpt: int = 3):\n        super().__init__(model, selector=lambda m: isinstance(\n            m, (nn.BatchNorm2d, nn.BatchNorm1d, nn.GroupNorm, nn.LayerNorm)))\n        self.lambda_ = lambda_\n        self.eps = eps\n        self.n = 0  # effective sample count for shrinkage\n        self.last_acc_hat = 1.0  # optimistic starting point\n        self.last_entropy = 0.0\n        self.checkpoints: deque = deque(maxlen=k_ckpt)\n\n    # ------------------------------------------------------------------ utils #\n    def _snapshot(self):\n        return {id(m): {\"weight\": m.weight.data.clone(),\n                         \"bias\": None if m.bias is None else m.bias.data.clone()} for m in self.affine}\n\n    def _restore(self, state_dict):\n        for m in self.affine:\n            buf = state_dict[id(m)]\n            m.weight.data.copy_(buf[\"weight\"])\n            if m.bias is not None and buf[\"bias\"] is not None:\n                m.bias.data.copy_(buf[\"bias\"])  # type: ignore[arg-type]\n\n    # --------------------------------------------------------------------- NG #\n    @torch.no_grad()\n    def zorro_step(self, logits: torch.Tensor):\n        probs = torch.softmax(logits, 1)\n        log_probs = torch.log_softmax(logits, 1)\n        entropy = -(probs * log_probs).sum(1)\n        var_proxy = (probs * (1 - probs)).sum(1)\n        acc_hat = 1.0 - var_proxy.mean()\n\n        should_update = (\n            (acc_hat < self.last_acc_hat - self.eps) or\n            (entropy.mean() > self.last_entropy * 0.9)\n        )\n\n        tau = self.n / (self.n + self.lambda_) if (self.n + self.lambda_) > 0 else 0.0\n\n        if should_update:\n            for mod in self.affine:\n                y = self.activation_cache[id(mod)]\n                axes = (0,) + tuple(range(2, y.ndim))  # mean/var per-channel\n                g = y.mean(dim=axes)\n                F_diag = y.var(dim=axes) + 1e-5\n                step = -tau * g / F_diag\n                mod.weight.data.add_(step.view_as(mod.weight))\n            self.checkpoints.append((self._snapshot(), acc_hat.item()))\n        else:\n            if len(self.checkpoints) == self.checkpoints.maxlen and \\\n                    acc_hat.item() > max(a for _, a in self.checkpoints):\n                best_state, _ = max(self.checkpoints, key=lambda x: x[1])\n                self._restore(best_state)\n\n        self.last_acc_hat = acc_hat.item()\n        self.last_entropy = entropy.mean().item()\n        self.n += 1\n\n\n################################################################################\n# ------------------------------  NGFAT ADAPTER  ----------------------------- #\n################################################################################\n\nclass NgfatState(_AffineHookMixin):\n    \"\"\"Minimal Natural-Gradient Forward Adaptation (NGFAT) for BN layers.\"\"\"\n\n    def __init__(self, model: nn.Module, eta: float = 1e-3):\n        super().__init__(model, selector=lambda m: isinstance(m, (nn.BatchNorm2d, nn.BatchNorm1d)))\n        self.eta = eta\n\n    # --------------------------------------------------------------------- NG #\n    @torch.no_grad()\n    def ngfat_step(self, logits):\n        probs = torch.softmax(logits, 1)\n        log_probs = torch.log_softmax(logits, 1)\n        entropy = -(probs * log_probs).sum(1)\n        H = entropy.mean()\n        for mod in self.affine:\n            y = self.activation_cache[id(mod)]\n            axes = (0,) + tuple(range(2, y.ndim))\n            g = y.mean(dim=axes)\n            F_diag = y.var(dim=axes) + 1e-5\n            step = -self.eta * g / F_diag\n            mod.weight.data.add_(step.view_as(mod.weight))\n        return H.item()\n\n\n################################################################################\n# ------------------------------  MAIN TRAINING  ----------------------------- #\n################################################################################\n\ndef _freeze_all(model):\n    for p in model.parameters():\n        p.requires_grad = False\n\n\ndef _set_requires_grad_bn(model):\n    for m in model.modules():\n        if isinstance(m, (nn.BatchNorm2d, nn.BatchNorm1d)):\n            if m.weight is not None:\n                m.weight.requires_grad_(True)\n            if m.bias is not None:\n                m.bias.requires_grad_(True)\n\n\ndef main():\n    args = parse_args()\n    cfg = yaml.safe_load(Path(args.config_path).read_text())\n    run_id = cfg[\"run_id\"]\n\n    results_root = Path(args.results_dir).expanduser()\n    results_root.mkdir(parents=True, exist_ok=True)\n    images_dir = results_root / \"images\"\n    images_dir.mkdir(exist_ok=True, parents=True)\n\n    set_seed(cfg.get(\"seed\", 42))\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # ---------------------------------------------------------------- dataset #\n    train_loader, val_loader, num_classes = get_dataloaders(cfg[\"dataset\"],\n                                                           cfg[\"training\"])\n\n    # --------------------------------------------------------------   model #\n    model_cfg = cfg[\"model\"]\n    model_cfg[\"num_classes\"] = num_classes\n    model = build_model(model_cfg).to(device)\n\n    # -----------------------------------------------------------  method sel #\n    optim_cfg = cfg[\"training\"]\n    method = optim_cfg.get(\"method\", \"source\").lower()\n\n    # -----------------------------  prepare optimiser / freeze strategy ---- #\n    if method == \"tent\":\n        _freeze_all(model)\n        _set_requires_grad_bn(model)\n        tent_params = [p for p in model.parameters() if p.requires_grad]\n        optimiser = optim.Adam(tent_params, lr=optim_cfg.get(\"learning_rate\", 1e-3))\n    elif method == \"source\":\n        optimiser = optim.Adam(model.parameters(), lr=optim_cfg.get(\"learning_rate\", 1e-3))\n    else:\n        # bn_adapt, ngfat, zorro do not use gradient-based optimiser for weights\n        optimiser = None  # type: ignore[assignment]\n\n    criterion = nn.CrossEntropyLoss()\n\n    # -------------------------  instantiate adaptation helpers ------------ #\n    z_state = ZorroState(model) if method == \"zorro\" else None\n    ng_state = NgfatState(model, eta=optim_cfg.get(\"eta\", 1e-3)) if method == \"ngfat\" else None\n\n    epochs = max(1, optim_cfg.get(\"epochs\", 1))\n    history: List[Dict[str, float]] = []\n\n    for epoch in range(1, epochs + 1):\n        if method in {\"bn_adapt\", \"tent\"}:\n            model.train(True)  # update stats in BN, enable dropout for tent\n        else:\n            model.train(False)\n\n        epoch_loss = 0.0\n        correct = total = 0\n        pbar = tqdm(train_loader, desc=f\"[{run_id}] Epoch {epoch}/{epochs}\")\n        for inputs, targets in pbar:\n            inputs, targets = inputs.to(device, non_blocking=True), targets.to(device, non_blocking=True)\n\n            if method == \"source\":\n                optimiser.zero_grad()\n                logits = model(inputs)\n                loss = criterion(logits, targets)\n                loss.backward()\n                optimiser.step()\n\n            elif method == \"bn_adapt\":\n                with torch.no_grad():\n                    logits = model(inputs)  # BN stats update implicitly\n                    loss = criterion(logits, targets)\n\n            elif method == \"tent\":\n                optimiser.zero_grad()\n                logits = model(inputs)\n                probs = torch.softmax(logits, 1)\n                ent_loss = (probs * torch.log_softmax(logits, 1)).sum(1).mean()\n                ent_loss.backward()\n                optimiser.step()\n                loss = criterion(logits.detach(), targets)\n\n            elif method == \"ngfat\":\n                with torch.no_grad():\n                    logits = model(inputs)\n                    ng_state.ngfat_step(logits)\n                loss = criterion(logits, targets)\n\n            elif method == \"zorro\":\n                with torch.no_grad():\n                    logits = model(inputs)\n                    z_state.zorro_step(logits)\n                loss = criterion(logits, targets)\n\n            else:\n                raise ValueError(f\"Unknown method: {method}\")\n\n            epoch_loss += loss.item() * inputs.size(0)\n            _, preds = logits.max(1)\n            correct += preds.eq(targets).sum().item()\n            total += inputs.size(0)\n            pbar.set_postfix({\"loss\": loss.item(), \"acc\": 100.0 * correct / max(total, 1)})\n\n        epoch_loss /= total\n        epoch_acc = 100.0 * correct / total\n        history.append({\"epoch\": epoch, \"loss\": epoch_loss, \"acc\": epoch_acc})\n\n    # ----------------------------------------------------------------- eval #\n    model.eval()\n    val_correct = val_total = 0\n    val_loss = 0.0\n    with torch.no_grad():\n        for inputs, targets in val_loader:\n            inputs, targets = inputs.to(device), targets.to(device)\n            logits = model(inputs)\n            loss = criterion(logits, targets)\n            val_loss += loss.item() * inputs.size(0)\n            _, preds = logits.max(1)\n            val_correct += preds.eq(targets).sum().item()\n            val_total += inputs.size(0)\n    val_loss /= val_total\n    val_acc = 100.0 * val_correct / val_total\n\n    ############################################################################\n    # ---------------------------  SAVE ARTIFACTS  --------------------------- #\n    ############################################################################\n    ckpt_path = results_root / \"model.pt\"\n    torch.save(model.state_dict(), ckpt_path)\n\n    metrics = {\n        \"run_id\": run_id,\n        \"method\": method,\n        \"epochs\": epochs,\n        \"train_history\": history,\n        \"val_loss\": val_loss,\n        \"val_acc\": val_acc,\n    }\n    (results_root / \"results.json\").write_text(json.dumps(metrics, indent=2))\n\n    # ---------------------------  FIGURES  ------------------------- #\n    epochs_axis = [h[\"epoch\"] for h in history]\n    train_loss_axis = [h[\"loss\"] for h in history]\n    train_acc_axis = [h[\"acc\"] for h in history]\n\n    # line – loss\n    plt.figure()\n    plt.plot(epochs_axis, train_loss_axis, marker=\"o\", label=\"train_loss\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Cross-entropy loss\")\n    plt.title(f\"Training loss – {run_id}\")\n    plt.legend()\n    plt.tight_layout()\n    plt.savefig(images_dir / \"training_loss.pdf\", bbox_inches=\"tight\")\n    plt.close()\n\n    # line – accuracy\n    plt.figure()\n    plt.plot(epochs_axis, train_acc_axis, marker=\"o\", label=\"train_acc\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Accuracy (%)\")\n    plt.title(f\"Training accuracy – {run_id}\")\n    plt.legend()\n    plt.tight_layout()\n    plt.savefig(images_dir / \"accuracy.pdf\", bbox_inches=\"tight\")\n    plt.close()\n\n    # -------------------- stdout summary (required) -------------------- #\n    print(json.dumps(metrics))\n\n\nif __name__ == \"__main__\":\n    main()",
    "evaluate_py": "#!/usr/bin/env python\n\"\"\"Aggregate results across run variations, compute comparison metrics &\npublication-ready figures.  This script is triggered *once* by src.main after\nall individual experiment runs are finished.\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\nmatplotlib.use(\"Agg\")\n\nFIG_TOPICS = [\n    (\"training_loss\", \"Cross-entropy loss\"),\n    (\"accuracy\", \"Accuracy (%)\"),\n    (\"final_accuracy_bar\", \"Final validation accuracy\")\n]\n\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--results-dir\", type=str, required=True,\n                   help=\"Root directory containing sub-dirs for each run\")\n    return p.parse_args()\n\n\ndef collect_results(results_dir: Path) -> pd.DataFrame:\n    records: List[Dict] = []\n    for sub in results_dir.iterdir():\n        if not sub.is_dir():\n            continue\n        res_file = sub / \"results.json\"\n        if res_file.exists():\n            rec = json.loads(res_file.read_text())\n            records.append(rec)\n    if not records:\n        raise RuntimeError(f\"No results.json files found in {results_dir}\")\n    return pd.DataFrame.from_records(records)\n\n\ndef plot_comparisons(df: pd.DataFrame, results_dir: Path):\n    images = results_dir / \"images\"\n    images.mkdir(exist_ok=True, parents=True)\n\n    # 1) Line curves – loss & acc\n    for metric_key, ylabel in [(\"loss\", \"Cross-entropy loss\"),\n                               (\"acc\", \"Accuracy (%)\")]:\n        plt.figure()\n        for _, row in df.iterrows():\n            y = [h[metric_key] for h in row[\"train_history\"]]\n            x = [h[\"epoch\"] for h in row[\"train_history\"]]\n            plt.plot(x, y, marker=\"o\", label=row[\"run_id\"])\n            plt.annotate(f\"{y[-1]:.2f}\" if metric_key == \"acc\" else f\"{y[-1]:.3f}\",\n                         (x[-1], y[-1]), textcoords=\"offset points\",\n                         xytext=(0, 5), ha='center')\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(ylabel)\n        plt.legend()\n        plt.title(ylabel + \" comparison\")\n        plt.tight_layout()\n        fname = \"training_loss.pdf\" if metric_key == \"loss\" else \"accuracy.pdf\"\n        plt.savefig(images / fname, bbox_inches=\"tight\")\n        plt.close()\n\n    # 2) Bar – final validation accuracy\n    plt.figure()\n    sns.barplot(x=\"run_id\", y=\"val_acc\", data=df)\n    for idx, row in df.iterrows():\n        plt.text(idx, row[\"val_acc\"] + 0.2, f\"{row['val_acc']:.2f}%\", ha='center')\n    plt.ylabel(\"Validation accuracy (%)\")\n    plt.xlabel(\"Run\")\n    plt.title(\"Final validation accuracy across runs\")\n    plt.tight_layout()\n    plt.savefig(images / \"final_accuracy_bar.pdf\", bbox_inches=\"tight\")\n    plt.close()\n\n\ndef main():\n    args = parse_args()\n    results_dir = Path(args.results_dir).expanduser()\n\n    df = collect_results(results_dir)\n    plot_comparisons(df, results_dir)\n\n    # Output comparison results in JSON (stdout)\n    comp = df[[\"run_id\", \"val_acc\", \"val_loss\" if \"val_loss\" in df.columns else None]].to_dict(\n        orient=\"records\")\n    print(json.dumps({\"comparison\": comp}))\n\n\nif __name__ == \"__main__\":\n    main()",
    "preprocess_py": "\"\"\"Common data pipeline with dataset placeholders.\nThe *core* logic (splitting, DataLoader creation, seeding) is fully\nimplemented. Dataset-specific loading is isolated behind clear placeholders so\nthat future steps can swap-in real datasets without touching any other code.\"\"\"\nfrom __future__ import annotations\n\nimport random\nfrom pathlib import Path\nfrom typing import Tuple\n\nimport numpy as np\nimport torch\nfrom torch.utils.data import DataLoader, TensorDataset, random_split\n\n__all__ = [\"get_dataloaders\", \"set_seed\"]\n\n\n# ------------------------------------------------------------------ utils --- #\n\ndef set_seed(seed: int):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n\n\n# ------------------------------------------------------------ core pipeline #\n\ndef _load_placeholder_dataset(cfg: dict) -> Tuple[torch.utils.data.Dataset, int]:\n    \"\"\"Generate a *synthetic* classification dataset. Useful for smoke tests and\n    retaining end-to-end functionality before real datasets are injected.\"\"\"\n    num_samples: int = cfg.get(\"num_samples\", 1024)\n    num_classes: int = cfg.get(\"num_classes\", 10)\n    input_shape = cfg.get(\"input_shape\", [3, 32, 32])\n\n    data = torch.randn(num_samples, *input_shape)\n    targets = torch.randint(0, num_classes, (num_samples,))\n    return TensorDataset(data, targets), num_classes\n\n\ndef _dataset_factory(cfg: dict):\n    name = cfg[\"name\"]\n    if name == \"SYNTHETIC_CLASSIFICATION_PLACEHOLDER\":\n        return _load_placeholder_dataset(cfg)\n    # ---------------------------------------------------------------------- #\n    # PLACEHOLDER: Will be replaced with specific dataset loading logic.     #\n    # Insert custom dataset returns (dataset, num_classes) below this line.  #\n    # ---------------------------------------------------------------------- #\n    raise NotImplementedError(f\"Dataset '{name}' is not implemented yet. \")\n\n\ndef get_dataloaders(dataset_cfg: dict, training_cfg: dict):\n    \"\"\"Return (train_loader, val_loader, num_classes).\"\"\"\n    dataset, num_classes = _dataset_factory(dataset_cfg)\n\n    # ------------------------- split into train / val -------------------- #\n    val_fraction = training_cfg.get(\"val_fraction\", 0.2)\n    val_size = int(len(dataset) * val_fraction)\n    train_size = len(dataset) - val_size\n    train_set, val_set = random_split(dataset, [train_size, val_size])\n\n    batch_size = training_cfg.get(\"batch_size\", 32)\n    num_workers = training_cfg.get(\"num_workers\", 0)\n\n    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True,\n                              num_workers=num_workers, pin_memory=True)\n    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False,\n                            num_workers=num_workers, pin_memory=True)\n\n    return train_loader, val_loader, num_classes",
    "model_py": "\"\"\"Model architectures & factory.\nOnly *core* logic is provided here. Dataset / modality specific models (e.g.\nResNet-20-GN, MobileNet-V2-GN, ViT-Tiny) will be injected later via the\nplaceholder mechanism.\"\"\"\nfrom __future__ import annotations\n\nfrom typing import Dict\n\nimport torch\nimport torch.nn as nn\n\n__all__ = [\"build_model\"]\n\n\n# ------------------------------------------------------------------ helpers #\n\ndef _make_norm(norm_type: str, num_features: int):\n    if norm_type == \"batch\":\n        return nn.BatchNorm2d(num_features, affine=True)\n    if norm_type == \"group\":\n        return nn.GroupNorm(num_groups=4, num_channels=num_features, affine=True)\n    if norm_type == \"layer\":\n        return nn.GroupNorm(num_groups=1, num_channels=num_features, affine=True)\n    raise ValueError(f\"Unsupported norm type: {norm_type}\")\n\n\n# --------------------------------------------------------------  SIMPLE CNN #\nclass SimpleCNN(nn.Module):\n    \"\"\"Light-weight CNN with GroupNorm. Suitable for smoke tests and synthetic\n    datasets. Real research models will be plugged-in later.\"\"\"\n\n    def __init__(self, in_channels: int = 3, num_classes: int = 10,\n                 norm: str = \"group\"):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(in_channels, 32, 3, padding=1),\n            _make_norm(norm, 32),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(32, 64, 3, padding=1),\n            _make_norm(norm, 64),\n            nn.ReLU(inplace=True),\n            nn.AdaptiveAvgPool2d((1, 1)),\n        )\n        self.classifier = nn.Linear(64, num_classes)\n\n    def forward(self, x):\n        x = self.features(x)\n        x = torch.flatten(x, 1)\n        return self.classifier(x)\n\n\n# ------------------------------------------------------------------ factory #\n\ndef build_model(model_cfg: Dict):\n    name = model_cfg.get(\"name\", \"simple_cnn\").lower()\n\n    if name in {\"simple_cnn\", \"simple_cnn_placeholder\"}:\n        return SimpleCNN(num_classes=model_cfg.get(\"num_classes\", 10))\n\n    # ------------------------------------------------------------------ #\n    # PLACEHOLDER: Additional models (ResNet-20-GN, ViT-Tiny, etc.) will be\n    # registered here in subsequent experiment-specific steps.            #\n    # ------------------------------------------------------------------ #\n    raise NotImplementedError(f\"Model '{name}' not yet implemented.\")",
    "main_py": "#!/usr/bin/env python\n\"\"\"Main orchestrator script.\n\nUsage examples:\n\n(1) Smoke test – lightweight synthetic run to verify that *all* variations\n    execute without GPU OOM etc.\n\n    uv run python -m src.main --smoke-test --results-dir /tmp/zorro_results\n\n(2) Full experiment – reads all variations from config/full_experiment.yaml\n\n    uv run python -m src.main --full-experiment --results-dir /path/to/res\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport shutil\nimport subprocess\nimport sys\nimport threading\nfrom pathlib import Path\nfrom typing import List\n\nimport yaml\n\nCONFIG_DIR = Path(__file__).resolve().parent.parent / \"config\"\n\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    g = p.add_mutually_exclusive_group(required=True)\n    g.add_argument(\"--smoke-test\", action=\"store_true\")\n    g.add_argument(\"--full-experiment\", action=\"store_true\")\n    p.add_argument(\"--results-dir\", type=str, required=True,\n                   help=\"Directory to store *all* outputs (logs, figs, metrics)\")\n    return p.parse_args()\n\n\n# ------------------------------------------------------------------- helpers #\n\ndef _tee(stream, tee_to_file):\n    \"\"\"Read `stream` byte-by-byte, write both to sys.<out/err> and file.\"\"\"\n    for line in iter(stream.readline, b\"\"):\n        decoded = line.decode()\n        tee_to_file.write(decoded)\n        tee_to_file.flush()\n        sys.stdout.write(decoded) if tee_to_file.name.endswith(\"stdout.log\") else sys.stderr.write(decoded)\n    stream.close()\n\n\ndef _launch_train(run_cfg: dict, results_root: Path, python_bin: str = sys.executable):\n    run_id = run_cfg[\"run_id\"]\n    run_dir = results_root / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Write single-run YAML for the sub-process to consume\n    run_cfg_path = run_dir / \"config.yaml\"\n    run_cfg_path.write_text(yaml.safe_dump(run_cfg))\n\n    # Prepare log files\n    stdout_path = run_dir / \"stdout.log\"\n    stderr_path = run_dir / \"stderr.log\"\n    stdout_f = stdout_path.open(\"w\")\n    stderr_f = stderr_path.open(\"w\")\n\n    cmd = [python_bin, \"-m\", \"src.train\", \"--config-path\", str(run_cfg_path),\n           \"--results-dir\", str(run_dir)]\n\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    # Real-time tee of stdout / stderr\n    threads: List[threading.Thread] = []\n    threads.append(threading.Thread(target=_tee, args=(proc.stdout, stdout_f)))\n    threads.append(threading.Thread(target=_tee, args=(proc.stderr, stderr_f)))\n    for t in threads:\n        t.daemon = True\n        t.start()\n\n    proc.wait()\n    for t in threads:\n        t.join()\n    stdout_f.close()\n    stderr_f.close()\n\n    if proc.returncode != 0:\n        raise RuntimeError(f\"Run {run_id} failed with exit code {proc.returncode}\")\n\n\n# -------------------------------------------------------------------- main #\n\ndef main():\n    args = parse_args()\n    results_root = Path(args.results_dir).expanduser()\n    if results_root.exists():\n        shutil.rmtree(results_root)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    cfg_path = CONFIG_DIR / (\"smoke_test.yaml\" if args.smoke_test else \"full_experiment.yaml\")\n    config = yaml.safe_load(cfg_path.read_text())\n    experiments = config[\"experiments\"]\n\n    for run_cfg in experiments:\n        _launch_train(run_cfg, results_root)\n\n    # After all runs -> aggregate\n    subprocess.run([sys.executable, \"-m\", \"src.evaluate\", \"--results-dir\", str(results_root)], check=True)\n\n\nif __name__ == \"__main__\":\n    main()",
    "pyproject_toml": "[project]\nname = \"zorro-experiments\"\nversion = \"0.1.0\"\ndescription = \"Common core foundation for ZORRO adaptation experiments\"\nrequires-python = \">=3.9\"\nauthors = [\n    { name = \"Research Automation\" }\n]\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\ntorch = \"^2.0\"\ntorchvision = \"^0.15\"\nmatplotlib = \"^3.7\"\nseaborn = \"^0.12\"\npyyaml = \"^6.0\"\npandas = \"^2.0\"\nscikit-learn = \"^1.2\"\nrich = \"^13.0\"\ntqdm = \"^4.0\"\ndatasets = \"^2.14\"\n\n[build-system]\nrequires = [\"setuptools\", \"wheel\"]\n",
    "smoke_test_yaml": "# Lightweight configuration used by CI smoke tests.\n# Runs quickly on synthetic data to validate full pipeline integrity.\n\nexperiments:\n  - run_id: smoke_source\n    seed: 123\n    dataset:\n      name: synthetic\n      num_samples: 512\n      num_classes: 10\n      input_shape: [3, 32, 32]\n    model:\n      name: simple_cnn\n    training:\n      epochs: 1\n      batch_size: 64\n      learning_rate: 0.001\n      method: source\n\n  - run_id: smoke_zorro\n    seed: 123\n    dataset:\n      name: synthetic\n      num_samples: 512\n      num_classes: 10\n      input_shape: [3, 32, 32]\n    model:\n      name: simple_cnn\n    training:\n      epochs: 1\n      batch_size: 64\n      method: zorro",
    "full_experiment_yaml": "# Full experiment suite for exp-1-main-performance.\n# Five run variations over CIFAR-10-C using ResNet-20-GN.\n\nexperiments:\n  - run_id: source_frozen\n    seed: 42\n    dataset:\n      name: cifar10_c\n      severity: [3, 4, 5]\n    model:\n      name: resnet20_gn\n    training:\n      method: source\n      epochs: 1\n      batch_size: 128\n      learning_rate: 0.001\n      val_fraction: 0.1\n\n  - run_id: bn_adapt\n    seed: 42\n    dataset:\n      name: cifar10_c\n      severity: [3, 4, 5]\n    model:\n      name: resnet20_gn\n    training:\n      method: bn_adapt\n      epochs: 1\n      batch_size: 128\n      val_fraction: 0.1\n\n  - run_id: tent\n    seed: 42\n    dataset:\n      name: cifar10_c\n      severity: [3, 4, 5]\n    model:\n      name: resnet20_gn\n    training:\n      method: tent\n      epochs: 1\n      batch_size: 128\n      learning_rate: 0.001\n      val_fraction: 0.1\n\n  - run_id: ngfat\n    seed: 42\n    dataset:\n      name: cifar10_c\n      severity: [3, 4, 5]\n    model:\n      name: resnet20_gn\n    training:\n      method: ngfat\n      epochs: 1\n      batch_size: 128\n      eta: 0.001\n      val_fraction: 0.1\n\n  - run_id: zorro_full\n    seed: 42\n    dataset:\n      name: cifar10_c\n      severity: [3, 4, 5]\n    model:\n      name: resnet20_gn\n    training:\n      method: zorro\n      epochs: 1\n      batch_size: 128\n      val_fraction: 0.1"
}
